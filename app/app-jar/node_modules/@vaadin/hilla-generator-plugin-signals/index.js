import Plugin from "@vaadin/hilla-generator-core/Plugin.js";
import SignalProcessor from "./SignalProcessor.js";
if (!("Iterator" in globalThis)) {
  const { installIntoGlobal } = await import("iterator-helpers-polyfill");
  installIntoGlobal();
}
const SIGNAL_CLASSES = [
  "#/components/schemas/com.vaadin.hilla.signals.NumberSignal",
  "#/components/schemas/com.vaadin.hilla.signals.ValueSignal"
];
function extractEndpointMethodsWithSignalsAsReturnType(storage) {
  return Object.entries(storage.api.paths).filter(([_, pathObject]) => {
    const response200 = pathObject?.post?.responses["200"];
    return response200 && !("$ref" in response200);
  }).flatMap(([path, pathObject]) => {
    const response200 = pathObject?.post?.responses["200"];
    const responseSchema = response200.content?.["application/json"]?.schema;
    return responseSchema && "anyOf" in responseSchema ? responseSchema.anyOf?.filter((c) => "$ref" in c && c.$ref && SIGNAL_CLASSES.includes(c.$ref)).map((c) => ({
      path,
      signalType: "$ref" in c ? c.$ref : ""
    })) : [];
  }).filter((signalArray) => signalArray != null);
}
function groupByService(signals) {
  return signals.reduce((serviceMap, signal) => {
    const [_, service, method] = signal.path.split("/");
    const serviceMethods = serviceMap.get(service) ?? /* @__PURE__ */ new Map();
    serviceMethods.set(method, signal.signalType);
    serviceMap.set(service, serviceMethods);
    return serviceMap;
  }, /* @__PURE__ */ new Map());
}
class SignalsPlugin extends Plugin {
  // eslint-disable-next-line @typescript-eslint/require-await
  async execute(sharedStorage) {
    const methodsWithSignals = extractEndpointMethodsWithSignalsAsReturnType(sharedStorage);
    const services = groupByService(methodsWithSignals);
    services.forEach((methods, service) => {
      const index = sharedStorage.sources.findIndex((source) => source.fileName === `${service}.ts`);
      if (index >= 0) {
        sharedStorage.sources[index] = new SignalProcessor(
          service,
          methods,
          sharedStorage.sources[index],
          this
        ).process();
      }
    });
  }
  get path() {
    return import.meta.url;
  }
}
export {
  SignalsPlugin as default
};
//# sourceMappingURL=index.js.map
