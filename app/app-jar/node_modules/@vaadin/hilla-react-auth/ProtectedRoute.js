import { jsx } from "react/jsx-runtime";
import { useContext } from "react";
import { Navigate, useLocation } from "react-router-dom";
import { AuthContext } from "./useAuth.js";
function ProtectedRoute({ redirectPath, access, element }) {
  const {
    state: { initializing, loading, user },
    hasAccess
  } = useContext(AuthContext);
  const location = useLocation();
  if (initializing || loading) {
    return /* @__PURE__ */ jsx("div", {});
  }
  if (!hasAccess(access)) {
    return /* @__PURE__ */ jsx(Navigate, { to: redirectPath, state: { from: location }, replace: true });
  }
  return element;
}
ProtectedRoute.type = "ProtectedRoute";
function* traverse(routes) {
  for (const route of routes) {
    yield route;
    if (route.children) {
      yield* traverse(route.children);
    }
  }
}
function protectRoute(route, redirectPath = "/login") {
  const { handle } = route;
  const requiresAuth = handle?.loginRequired ?? handle?.requiresLogin ?? handle?.rolesAllowed?.length;
  if (requiresAuth) {
    route.element = /* @__PURE__ */ jsx(
      ProtectedRoute,
      {
        redirectPath,
        access: handle,
        element: route.element
      }
    );
  }
  return route;
}
function protectRoutes(routes, redirectPath = "/login") {
  for (const route of traverse(routes)) {
    protectRoute(route, redirectPath);
  }
  return routes;
}
export {
  protectRoute,
  protectRoutes
};
//# sourceMappingURL=ProtectedRoute.js.map
