{
  "version": 3,
  "sources": ["../src/runtime/RouterConfigurationBuilder.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { protectRoute } from '@vaadin/hilla-react-auth';\nimport { type ComponentType, createElement } from 'react';\nimport {\n  createBrowserRouter,\n  type IndexRouteObject,\n  type NonIndexRouteObject,\n  type RouteObject,\n} from 'react-router-dom';\nimport { convertComponentNameToTitle } from '../shared/convertComponentNameToTitle.js';\nimport { transformTree } from '../shared/transformTree.js';\nimport type {\n  AgnosticRoute,\n  Module,\n  RouteModule,\n  RouterBuildOptions,\n  RouterConfiguration,\n  ViewConfig,\n} from '../types.js';\n\ninterface RouteBase {\n  path?: string;\n  children?: readonly this[];\n}\n\ntype RoutesModifier = (routes: readonly RouteObject[] | undefined) => readonly RouteObject[] | undefined;\n\nfunction isReactRouteModule(module?: Module): module is RouteModule<ComponentType> | undefined {\n  return module ? 'default' in module && typeof module.default === 'function' : true;\n}\n\ntype RouteTransformer<T> = (\n  original: RouteObject | undefined,\n  overriding: T | undefined,\n  children?: readonly RouteObject[],\n) => RouteObject | undefined;\n\nfunction createRouteEntry<T extends RouteBase>(route: T): readonly [key: string, value: T] {\n  return [`${route.path ?? ''}-${route.children ? 'n' : 'i'}`, route];\n}\n\nenum RouteHandleFlags {\n  FLOW_LAYOUT = 'flowLayout',\n  IGNORE_FALLBACK = 'ignoreFallback',\n}\n\nfunction hasRouteHandleFlag<T extends RouteHandleFlags>(\n  route: RouteObject,\n  flag: T,\n): route is { readonly handle: Readonly<Record<T, boolean>> } {\n  return typeof route.handle === 'object' && flag in route.handle && (route.handle as Record<T, boolean>)[flag];\n}\n\n/**\n * A builder for creating a Vaadin-specific router for React with\n * authentication and server routes support.\n */\nexport class RouterConfigurationBuilder {\n  readonly #modifiers: RoutesModifier[] = [];\n\n  /**\n   * Adds the given routes to the current list of routes. All the routes are\n   * deeply merged to preserve the path uniqueness.\n   *\n   * @param routes - A list of routes to add to the current list.\n   */\n  withReactRoutes(routes: readonly RouteObject[]): this {\n    return this.update(routes);\n  }\n\n  /**\n   * Adds the given file routes to the current list of routes. All the routes\n   * are transformed to React RouterObjects and deeply merged to preserve the\n   * path uniqueness.\n   *\n   * @param routes - A list of routes to add to the current list.\n   */\n  withFileRoutes(routes: readonly AgnosticRoute[]): this {\n    return this.update(routes, (original, added, children) => {\n      if (added) {\n        const { module, path, flowLayout } = added;\n        if (!isReactRouteModule(module)) {\n          throw new Error(`The module for the \"${path}\" section doesn't have the React component exported by default`);\n        }\n\n        const element = module?.default ? createElement(module.default) : undefined;\n        const handle = {\n          ...module?.config,\n          title: module?.config?.title ?? convertComponentNameToTitle(module?.default),\n          flowLayout: module?.config?.flowLayout ?? flowLayout,\n        };\n\n        if (path === '' && !children) {\n          return {\n            ...original,\n            element,\n            handle,\n            index: true,\n          } as IndexRouteObject;\n        }\n\n        return {\n          ...original,\n          path: module?.config?.route ?? path,\n          element,\n          children,\n          handle,\n        } as NonIndexRouteObject;\n      }\n\n      return original;\n    });\n  }\n\n  /**\n   * Adds the given server route element to each branch of the current list of\n   * routes.\n   *\n   * @param component - The React component to add to each branch of the\n   * current list of routes.\n   * @param config - An optional configuration that will be applied to\n   * each fallback component.\n   */\n  withFallback(component: ComponentType, config?: ViewConfig): this {\n    this.withLayout(component);\n\n    // Fallback adds two routes, so that the index (empty path) has a fallback too\n    const fallbackRoutes: readonly RouteObject[] = [\n      { path: '*', element: createElement(component), handle: config },\n      { index: true, element: createElement(component), handle: config },\n    ];\n\n    this.update(fallbackRoutes, (original, added, children) => {\n      if (original && !hasRouteHandleFlag(original, RouteHandleFlags.IGNORE_FALLBACK)) {\n        if (!children) {\n          return original;\n        }\n\n        const _fallback = [...fallbackRoutes];\n\n        if (children.some(({ path }) => path === '*')) {\n          _fallback.shift();\n        }\n\n        if (children.some(({ index: i, path }) => i ?? path?.includes('?'))) {\n          _fallback.pop();\n        }\n\n        return {\n          ...original,\n          children: [...children, ..._fallback],\n        } as RouteObject;\n      }\n\n      return added!;\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the layoutComponent as the parent layout to views with the flowLayouts ViewConfiguration set.\n   *\n   * @param layoutComponent - layout component to use, usually Flow\n   */\n  withLayout(layoutComponent: ComponentType): this {\n    this.#modifiers.push((originalRoutes: readonly RouteObject[] | undefined) => {\n      if (originalRoutes === undefined) {\n        return originalRoutes;\n      }\n      // Split the routes tree onto two subtrees with and without\n      // a server layout.\n      const [serverRoutesTree, clientRoutesTree]: [RouteObject[] | undefined, RouteObject[] | undefined] =\n        transformTree<readonly RouteObject[], [RouteObject[] | undefined, RouteObject[] | undefined]>(\n          originalRoutes,\n          (\n            routes: readonly RouteObject[],\n            next: (...nodes: readonly RouteObject[]) => [RouteObject[] | undefined, RouteObject[] | undefined],\n          ) =>\n            // Split single routes list onto two filtered lists\n            routes.reduce<[RouteObject[] | undefined, RouteObject[] | undefined]>(\n              ([serverRoutesList, clientRoutesList], route) => {\n                if (hasRouteHandleFlag(route, RouteHandleFlags.FLOW_LAYOUT)) {\n                  // Server layout is explicitly declared: move to the entire\n                  // route to the server list, taking also all the children.\n                  return [[...(serverRoutesList ?? []), route], clientRoutesList];\n                }\n                if (!route.children?.length) {\n                  // Leaf routes and empty layouts: move to the client list.\n                  return [serverRoutesList, [...(clientRoutesList ?? []), route]];\n                }\n                // Nested children: collect server and client subtrees, and\n                // copy the current route to either or both the server and\n                // the client lists with the respective subtree as children.\n                const [serverRouteSubtree, clientRouteSubtree] = next(...route.children);\n                return [\n                  serverRouteSubtree\n                    ? [\n                        ...(serverRoutesList ?? []),\n                        {\n                          ...route,\n                          children: serverRouteSubtree,\n                        },\n                      ]\n                    : serverRoutesList,\n                  clientRouteSubtree\n                    ? [\n                        ...(clientRoutesList ?? []),\n                        {\n                          ...route,\n                          children: clientRouteSubtree,\n                        },\n                      ]\n                    : clientRoutesList,\n                ];\n              },\n              [undefined, undefined],\n            ),\n        );\n\n      return [\n        // The server subtree is wrapped with the server layout component,\n        // which applies the top-level server layout to all matches.\n        ...(serverRoutesTree\n          ? [\n              {\n                element: createElement(layoutComponent),\n                children: serverRoutesTree,\n                handle: {\n                  [RouteHandleFlags.IGNORE_FALLBACK]: true,\n                },\n              },\n            ]\n          : []),\n        // The client route subtree is preserved without wrapping.\n        ...(clientRoutesTree ?? []),\n      ];\n    });\n    return this;\n  }\n\n  /**\n   * Protects all the routes that require authentication. For more details see\n   * {@link @vaadin/hilla-react-auth#protectRoutes} function.\n   *\n   * @param redirectPath - the path to redirect to if the route is protected\n   * and the user is not authenticated.\n   */\n  protect(redirectPath?: string): this {\n    this.update(undefined, (route, _, children) => {\n      const finalRoute = protectRoute(route!, redirectPath);\n      finalRoute.children = children as RouteObject[] | undefined;\n      return finalRoute;\n    });\n\n    return this;\n  }\n\n  update<T extends RouteBase>(routes: undefined, callback: RouteTransformer<undefined>): this;\n  update<T extends RouteBase>(routes: readonly T[], callback?: RouteTransformer<T>): this;\n  update<T extends RouteBase>(\n    routes: readonly T[] | undefined,\n    callback: RouteTransformer<T | undefined> = (original, overriding, children) =>\n      ({\n        ...original,\n        ...overriding,\n        children,\n      }) as RouteObject,\n  ): this {\n    this.#modifiers.push((existingRoutes) =>\n      transformTree<[readonly RouteObject[] | undefined, readonly T[] | undefined], readonly RouteObject[] | undefined>(\n        [existingRoutes, routes],\n        ([original, added], next) => {\n          if (original && added) {\n            const originalMap = new Map(original.map((route) => createRouteEntry(route)));\n            const addedMap = new Map(added.map((route) => createRouteEntry(route)));\n\n            const paths = new Set([...originalMap.keys(), ...addedMap.keys()]);\n\n            for (const path of paths) {\n              const originalRoute = originalMap.get(path);\n              const addedRoute = addedMap.get(path);\n\n              let route: RouteObject | undefined;\n              if (originalRoute && addedRoute) {\n                route = callback(originalRoute, addedRoute, next(originalRoute.children, addedRoute.children));\n              } else if (originalRoute) {\n                route = callback(originalRoute, undefined, next(originalRoute.children, undefined));\n              } else {\n                route = callback(undefined, addedRoute, next(undefined, addedRoute!.children));\n              }\n\n              if (route) {\n                originalMap.set(path, route);\n              }\n            }\n\n            return [...originalMap.values()];\n          } else if (original) {\n            return original\n              .map((route) => callback(route, undefined, next(route.children, undefined)))\n              .filter(Boolean) as readonly RouteObject[];\n          } else if (added) {\n            return added\n              .map((route) => callback(undefined, route, next(undefined, route.children)))\n              .filter(Boolean) as readonly RouteObject[];\n          }\n\n          return undefined;\n        },\n      ),\n    );\n    return this;\n  }\n\n  /**\n   * Builds the router with the current list of routes.\n   */\n  build(options?: RouterBuildOptions): RouterConfiguration {\n    const routes =\n      this.#modifiers.reduce<readonly RouteObject[] | undefined>((acc, mod) => mod(acc) ?? acc, undefined) ?? [];\n\n    return {\n      routes,\n      router: createBrowserRouter([...routes], { basename: new URL(document.baseURI).pathname, ...options }),\n    };\n  }\n}\n"],
  "mappings": "AACA,SAAS,oBAAoB;AAC7B,SAA6B,qBAAqB;AAClD;AAAA,EACE;AAAA,OAIK;AACP,SAAS,mCAAmC;AAC5C,SAAS,qBAAqB;AAiB9B,SAAS,mBAAmB,QAAmE;AAC7F,SAAO,SAAS,aAAa,UAAU,OAAO,OAAO,YAAY,aAAa;AAChF;AAQA,SAAS,iBAAsC,OAA4C;AACzF,SAAO,CAAC,GAAG,MAAM,QAAQ,EAAE,IAAI,MAAM,WAAW,MAAM,GAAG,IAAI,KAAK;AACpE;AAEA,IAAK,mBAAL,kBAAKA,sBAAL;AACE,EAAAA,kBAAA,iBAAc;AACd,EAAAA,kBAAA,qBAAkB;AAFf,SAAAA;AAAA,GAAA;AAKL,SAAS,mBACP,OACA,MAC4D;AAC5D,SAAO,OAAO,MAAM,WAAW,YAAY,QAAQ,MAAM,UAAW,MAAM,OAA8B,IAAI;AAC9G;AAMO,MAAM,2BAA2B;AAAA,EAC7B,aAA+B,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQzC,gBAAgB,QAAsC;AACpD,WAAO,KAAK,OAAO,MAAM;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,QAAwC;AACrD,WAAO,KAAK,OAAO,QAAQ,CAAC,UAAU,OAAO,aAAa;AACxD,UAAI,OAAO;AACT,cAAM,EAAE,QAAQ,MAAM,WAAW,IAAI;AACrC,YAAI,CAAC,mBAAmB,MAAM,GAAG;AAC/B,gBAAM,IAAI,MAAM,uBAAuB,IAAI,gEAAgE;AAAA,QAC7G;AAEA,cAAM,UAAU,QAAQ,UAAU,cAAc,OAAO,OAAO,IAAI;AAClE,cAAM,SAAS;AAAA,UACb,GAAG,QAAQ;AAAA,UACX,OAAO,QAAQ,QAAQ,SAAS,4BAA4B,QAAQ,OAAO;AAAA,UAC3E,YAAY,QAAQ,QAAQ,cAAc;AAAA,QAC5C;AAEA,YAAI,SAAS,MAAM,CAAC,UAAU;AAC5B,iBAAO;AAAA,YACL,GAAG;AAAA,YACH;AAAA,YACA;AAAA,YACA,OAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO;AAAA,UACL,GAAG;AAAA,UACH,MAAM,QAAQ,QAAQ,SAAS;AAAA,UAC/B;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,aAAa,WAA0B,QAA2B;AAChE,SAAK,WAAW,SAAS;AAGzB,UAAM,iBAAyC;AAAA,MAC7C,EAAE,MAAM,KAAK,SAAS,cAAc,SAAS,GAAG,QAAQ,OAAO;AAAA,MAC/D,EAAE,OAAO,MAAM,SAAS,cAAc,SAAS,GAAG,QAAQ,OAAO;AAAA,IACnE;AAEA,SAAK,OAAO,gBAAgB,CAAC,UAAU,OAAO,aAAa;AACzD,UAAI,YAAY,CAAC,mBAAmB,UAAU,sCAAgC,GAAG;AAC/E,YAAI,CAAC,UAAU;AACb,iBAAO;AAAA,QACT;AAEA,cAAM,YAAY,CAAC,GAAG,cAAc;AAEpC,YAAI,SAAS,KAAK,CAAC,EAAE,KAAK,MAAM,SAAS,GAAG,GAAG;AAC7C,oBAAU,MAAM;AAAA,QAClB;AAEA,YAAI,SAAS,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,MAAM,KAAK,MAAM,SAAS,GAAG,CAAC,GAAG;AACnE,oBAAU,IAAI;AAAA,QAChB;AAEA,eAAO;AAAA,UACL,GAAG;AAAA,UACH,UAAU,CAAC,GAAG,UAAU,GAAG,SAAS;AAAA,QACtC;AAAA,MACF;AAEA,aAAO;AAAA,IACT,CAAC;AAED,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,iBAAsC;AAC/C,SAAK,WAAW,KAAK,CAAC,mBAAuD;AAC3E,UAAI,mBAAmB,QAAW;AAChC,eAAO;AAAA,MACT;AAGA,YAAM,CAAC,kBAAkB,gBAAgB,IACvC;AAAA,QACE;AAAA,QACA,CACE,QACA;AAAA;AAAA,UAGA,OAAO;AAAA,YACL,CAAC,CAAC,kBAAkB,gBAAgB,GAAG,UAAU;AAC/C,kBAAI,mBAAmB,OAAO,8BAA4B,GAAG;AAG3D,uBAAO,CAAC,CAAC,GAAI,oBAAoB,CAAC,GAAI,KAAK,GAAG,gBAAgB;AAAA,cAChE;AACA,kBAAI,CAAC,MAAM,UAAU,QAAQ;AAE3B,uBAAO,CAAC,kBAAkB,CAAC,GAAI,oBAAoB,CAAC,GAAI,KAAK,CAAC;AAAA,cAChE;AAIA,oBAAM,CAAC,oBAAoB,kBAAkB,IAAI,KAAK,GAAG,MAAM,QAAQ;AACvE,qBAAO;AAAA,gBACL,qBACI;AAAA,kBACE,GAAI,oBAAoB,CAAC;AAAA,kBACzB;AAAA,oBACE,GAAG;AAAA,oBACH,UAAU;AAAA,kBACZ;AAAA,gBACF,IACA;AAAA,gBACJ,qBACI;AAAA,kBACE,GAAI,oBAAoB,CAAC;AAAA,kBACzB;AAAA,oBACE,GAAG;AAAA,oBACH,UAAU;AAAA,kBACZ;AAAA,gBACF,IACA;AAAA,cACN;AAAA,YACF;AAAA,YACA,CAAC,QAAW,MAAS;AAAA,UACvB;AAAA;AAAA,MACJ;AAEF,aAAO;AAAA;AAAA;AAAA,QAGL,GAAI,mBACA;AAAA,UACE;AAAA,YACE,SAAS,cAAc,eAAe;AAAA,YACtC,UAAU;AAAA,YACV,QAAQ;AAAA,cACN,CAAC,sCAAgC,GAAG;AAAA,YACtC;AAAA,UACF;AAAA,QACF,IACA,CAAC;AAAA;AAAA,QAEL,GAAI,oBAAoB,CAAC;AAAA,MAC3B;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,cAA6B;AACnC,SAAK,OAAO,QAAW,CAAC,OAAO,GAAG,aAAa;AAC7C,YAAM,aAAa,aAAa,OAAQ,YAAY;AACpD,iBAAW,WAAW;AACtB,aAAO;AAAA,IACT,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAIA,OACE,QACA,WAA4C,CAAC,UAAU,YAAY,cAChE;AAAA,IACC,GAAG;AAAA,IACH,GAAG;AAAA,IACH;AAAA,EACF,IACI;AACN,SAAK,WAAW;AAAA,MAAK,CAAC,mBACpB;AAAA,QACE,CAAC,gBAAgB,MAAM;AAAA,QACvB,CAAC,CAAC,UAAU,KAAK,GAAG,SAAS;AAC3B,cAAI,YAAY,OAAO;AACrB,kBAAM,cAAc,IAAI,IAAI,SAAS,IAAI,CAAC,UAAU,iBAAiB,KAAK,CAAC,CAAC;AAC5E,kBAAM,WAAW,IAAI,IAAI,MAAM,IAAI,CAAC,UAAU,iBAAiB,KAAK,CAAC,CAAC;AAEtE,kBAAM,QAAQ,oBAAI,IAAI,CAAC,GAAG,YAAY,KAAK,GAAG,GAAG,SAAS,KAAK,CAAC,CAAC;AAEjE,uBAAW,QAAQ,OAAO;AACxB,oBAAM,gBAAgB,YAAY,IAAI,IAAI;AAC1C,oBAAM,aAAa,SAAS,IAAI,IAAI;AAEpC,kBAAI;AACJ,kBAAI,iBAAiB,YAAY;AAC/B,wBAAQ,SAAS,eAAe,YAAY,KAAK,cAAc,UAAU,WAAW,QAAQ,CAAC;AAAA,cAC/F,WAAW,eAAe;AACxB,wBAAQ,SAAS,eAAe,QAAW,KAAK,cAAc,UAAU,MAAS,CAAC;AAAA,cACpF,OAAO;AACL,wBAAQ,SAAS,QAAW,YAAY,KAAK,QAAW,WAAY,QAAQ,CAAC;AAAA,cAC/E;AAEA,kBAAI,OAAO;AACT,4BAAY,IAAI,MAAM,KAAK;AAAA,cAC7B;AAAA,YACF;AAEA,mBAAO,CAAC,GAAG,YAAY,OAAO,CAAC;AAAA,UACjC,WAAW,UAAU;AACnB,mBAAO,SACJ,IAAI,CAAC,UAAU,SAAS,OAAO,QAAW,KAAK,MAAM,UAAU,MAAS,CAAC,CAAC,EAC1E,OAAO,OAAO;AAAA,UACnB,WAAW,OAAO;AAChB,mBAAO,MACJ,IAAI,CAAC,UAAU,SAAS,QAAW,OAAO,KAAK,QAAW,MAAM,QAAQ,CAAC,CAAC,EAC1E,OAAO,OAAO;AAAA,UACnB;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAmD;AACvD,UAAM,SACJ,KAAK,WAAW,OAA2C,CAAC,KAAK,QAAQ,IAAI,GAAG,KAAK,KAAK,MAAS,KAAK,CAAC;AAE3G,WAAO;AAAA,MACL;AAAA,MACA,QAAQ,oBAAoB,CAAC,GAAG,MAAM,GAAG,EAAE,UAAU,IAAI,IAAI,SAAS,OAAO,EAAE,UAAU,GAAG,QAAQ,CAAC;AAAA,IACvG;AAAA,EACF;AACF;",
  "names": ["RouteHandleFlags"]
}
