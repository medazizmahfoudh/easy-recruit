{
  "version": 3,
  "sources": ["src/vite-plugin.ts"],
  "sourcesContent": ["import { basename } from 'node:path';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport type { TransformResult } from 'rollup';\nimport type { Logger, Plugin } from 'vite';\nimport { generateRuntimeFiles, type RuntimeFileUrls } from './vite-plugin/generateRuntimeFiles.js';\n\nconst INJECTION =\n  \"if (Object.keys(nextExports).length === 2 && 'default' in nextExports && 'config' in nextExports) {nextExports = { ...nextExports, config: currentExports.config };}\";\n\n/**\n * The options for the Vite file-based router plugin.\n */\nexport type PluginOptions = Readonly<{\n  /**\n   * The base directory for the router. The folders and files in this directory\n   * will be used as route paths.\n   *\n   * @defaultValue `frontend/views`\n   */\n  viewsDir?: URL | string;\n  /**\n   * The directory where the generated view file will be stored.\n   *\n   * @defaultValue `frontend/generated`\n   */\n  generatedDir?: URL | string;\n  /**\n   * The list of extensions that will be collected as routes of the file-based\n   * router.\n   *\n   * @defaultValue `['.tsx', '.jsx']`\n   */\n  extensions?: readonly string[];\n  /**\n   * The flag to indicate whether the plugin is running in development mode.\n   *\n   * @defaultValue `false`\n   */\n  isDevMode?: boolean;\n  /**\n   * The flag to indicate whether to output debug information\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n}>;\n\n/**\n * A Vite plugin that generates a router from the files in the specific directory.\n *\n * @param options - The plugin options.\n * @returns A Vite plugin.\n */\nexport default function vitePluginFileSystemRouter({\n  viewsDir = 'frontend/views/',\n  generatedDir = 'frontend/generated/',\n  extensions = ['.tsx', '.jsx'],\n  isDevMode = false,\n  debug = false,\n}: PluginOptions = {}): Plugin {\n  let _viewsDir: URL;\n  let _outDir: URL;\n  let _logger: Logger;\n  let runtimeUrls: RuntimeFileUrls;\n\n  return {\n    name: 'vite-plugin-file-router',\n    configResolved({ logger, root, build: { outDir } }) {\n      const _root = pathToFileURL(root);\n      const _generatedDir = new URL(generatedDir, _root);\n\n      _viewsDir = new URL(viewsDir, _root);\n      _outDir = pathToFileURL(outDir);\n      _logger = logger;\n\n      if (debug) {\n        _logger.info(`The directory of route files: ${String(_viewsDir)}`);\n        _logger.info(`The directory of generated files: ${String(_generatedDir)}`);\n        _logger.info(`The output directory: ${String(_outDir)}`);\n      }\n      runtimeUrls = {\n        json: new URL('file-routes.json', isDevMode ? _generatedDir : _outDir),\n        code: new URL('file-routes.ts', _generatedDir),\n        layouts: new URL('layouts.json', _generatedDir),\n      };\n    },\n    async buildStart() {\n      try {\n        await generateRuntimeFiles(_viewsDir, runtimeUrls, extensions, _logger, debug);\n      } catch (e: unknown) {\n        _logger.error(String(e));\n      }\n    },\n    configureServer(server) {\n      const dir = fileURLToPath(_viewsDir);\n\n      const changeListener = (file: string): void => {\n        if (!file.startsWith(dir)) {\n          if (file === fileURLToPath(runtimeUrls.json)) {\n            server.hot.send({ type: 'custom', event: 'fs-route-update' });\n          } else if (file !== fileURLToPath(runtimeUrls.layouts)) {\n            // outside views folder, only changes to layouts file should trigger files generation\n            return;\n          }\n        }\n\n        generateRuntimeFiles(_viewsDir, runtimeUrls, extensions, _logger, debug).catch((e: unknown) =>\n          _logger.error(String(e)),\n        );\n      };\n\n      server.watcher.on('add', changeListener);\n      server.watcher.on('change', changeListener);\n      server.watcher.on('unlink', changeListener);\n    },\n    transform(code, id): Promise<TransformResult> | TransformResult {\n      let modifiedCode = code;\n      if (id.startsWith(fileURLToPath(_viewsDir)) && !basename(id).startsWith('_')) {\n        if (isDevMode) {\n          // To enable HMR for route files with exported configurations, we need\n          // to address a limitation in `react-refresh`. This library requires\n          // strict equality (`===`) for non-component exports. However, the\n          // dynamic nature of HMR makes maintaining this equality between object\n          // literals challenging.\n          //\n          // To work around this, we implement a strategy that preserves the\n          // reference to the original configuration object (`currentExports.config`),\n          // replacing any newly created configuration objects (`nextExports.config`)\n          // with it. This ensures that the HMR mechanism perceives the\n          // configuration as unchanged.\n          const injectionPattern = /import\\.meta\\.hot\\.accept[\\s\\S]+if\\s\\(!nextExports\\)\\s+return;/gu;\n          if (injectionPattern.test(modifiedCode)) {\n            modifiedCode = `${modifiedCode.substring(0, injectionPattern.lastIndex)}${INJECTION}${modifiedCode.substring(\n              injectionPattern.lastIndex,\n            )}`;\n          }\n        } else {\n          // In production mode, the function name is assigned as name to the function itself to avoid minification\n          const functionNames = /export\\s+default\\s+(?:function\\s+)?(\\w+)/u.exec(modifiedCode);\n\n          if (functionNames?.length) {\n            const [, functionName] = functionNames;\n            modifiedCode += `Object.defineProperty(${functionName}, 'name', { value: '${functionName}' });\\n`;\n          }\n        }\n\n        return {\n          code: modifiedCode,\n        };\n      }\n\n      return undefined;\n    },\n  };\n}\n"],
  "mappings": "AAAA,SAAS,gBAAgB;AACzB,SAAS,eAAe,qBAAqB;AAG7C,SAAS,4BAAkD;AAE3D,MAAM,YACJ;AA8Ca,SAAR,2BAA4C;AAAA,EACjD,WAAW;AAAA,EACX,eAAe;AAAA,EACf,aAAa,CAAC,QAAQ,MAAM;AAAA,EAC5B,YAAY;AAAA,EACZ,QAAQ;AACV,IAAmB,CAAC,GAAW;AAC7B,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,SAAO;AAAA,IACL,MAAM;AAAA,IACN,eAAe,EAAE,QAAQ,MAAM,OAAO,EAAE,OAAO,EAAE,GAAG;AAClD,YAAM,QAAQ,cAAc,IAAI;AAChC,YAAM,gBAAgB,IAAI,IAAI,cAAc,KAAK;AAEjD,kBAAY,IAAI,IAAI,UAAU,KAAK;AACnC,gBAAU,cAAc,MAAM;AAC9B,gBAAU;AAEV,UAAI,OAAO;AACT,gBAAQ,KAAK,iCAAiC,OAAO,SAAS,CAAC,EAAE;AACjE,gBAAQ,KAAK,qCAAqC,OAAO,aAAa,CAAC,EAAE;AACzE,gBAAQ,KAAK,yBAAyB,OAAO,OAAO,CAAC,EAAE;AAAA,MACzD;AACA,oBAAc;AAAA,QACZ,MAAM,IAAI,IAAI,oBAAoB,YAAY,gBAAgB,OAAO;AAAA,QACrE,MAAM,IAAI,IAAI,kBAAkB,aAAa;AAAA,QAC7C,SAAS,IAAI,IAAI,gBAAgB,aAAa;AAAA,MAChD;AAAA,IACF;AAAA,IACA,MAAM,aAAa;AACjB,UAAI;AACF,cAAM,qBAAqB,WAAW,aAAa,YAAY,SAAS,KAAK;AAAA,MAC/E,SAAS,GAAY;AACnB,gBAAQ,MAAM,OAAO,CAAC,CAAC;AAAA,MACzB;AAAA,IACF;AAAA,IACA,gBAAgB,QAAQ;AACtB,YAAM,MAAM,cAAc,SAAS;AAEnC,YAAM,iBAAiB,CAAC,SAAuB;AAC7C,YAAI,CAAC,KAAK,WAAW,GAAG,GAAG;AACzB,cAAI,SAAS,cAAc,YAAY,IAAI,GAAG;AAC5C,mBAAO,IAAI,KAAK,EAAE,MAAM,UAAU,OAAO,kBAAkB,CAAC;AAAA,UAC9D,WAAW,SAAS,cAAc,YAAY,OAAO,GAAG;AAEtD;AAAA,UACF;AAAA,QACF;AAEA,6BAAqB,WAAW,aAAa,YAAY,SAAS,KAAK,EAAE;AAAA,UAAM,CAAC,MAC9E,QAAQ,MAAM,OAAO,CAAC,CAAC;AAAA,QACzB;AAAA,MACF;AAEA,aAAO,QAAQ,GAAG,OAAO,cAAc;AACvC,aAAO,QAAQ,GAAG,UAAU,cAAc;AAC1C,aAAO,QAAQ,GAAG,UAAU,cAAc;AAAA,IAC5C;AAAA,IACA,UAAU,MAAM,IAAgD;AAC9D,UAAI,eAAe;AACnB,UAAI,GAAG,WAAW,cAAc,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,WAAW,GAAG,GAAG;AAC5E,YAAI,WAAW;AAYb,gBAAM,mBAAmB;AACzB,cAAI,iBAAiB,KAAK,YAAY,GAAG;AACvC,2BAAe,GAAG,aAAa,UAAU,GAAG,iBAAiB,SAAS,CAAC,GAAG,SAAS,GAAG,aAAa;AAAA,cACjG,iBAAiB;AAAA,YACnB,CAAC;AAAA,UACH;AAAA,QACF,OAAO;AAEL,gBAAM,gBAAgB,4CAA4C,KAAK,YAAY;AAEnF,cAAI,eAAe,QAAQ;AACzB,kBAAM,CAAC,EAAE,YAAY,IAAI;AACzB,4BAAgB,yBAAyB,YAAY,uBAAuB,YAAY;AAAA;AAAA,UAC1F;AAAA,QACF;AAEA,eAAO;AAAA,UACL,MAAM;AAAA,QACR;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AACF;",
  "names": []
}
