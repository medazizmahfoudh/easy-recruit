{
  "version": 3,
  "sources": ["../src/vite-plugin/utils.ts"],
  "sourcesContent": ["import { RouteParamType } from '../shared/routeParamType.js';\n\nexport const routeParamTypeMap: ReadonlyMap<RouteParamType, RegExp> = new Map([\n  [RouteParamType.Wildcard, /\\{\\.\\.\\.(.+)\\}/gu], // e.g. \"{...wildcard}\"\n  [RouteParamType.Optional, /\\{\\{(.+)\\}\\}/gu], // e.g. \"{{param}}\"\n  [RouteParamType.Required, /\\{(.+)\\}/gu], // e.g. \"{param}\"\n]);\n\n// eslint-disable-next-line consistent-return\nfunction getReplacer(type: RouteParamType): string {\n  // eslint-disable-next-line default-case\n  switch (type) {\n    case RouteParamType.Wildcard:\n      return '*';\n    case RouteParamType.Optional:\n      return ':$1?';\n    case RouteParamType.Required:\n      return ':$1';\n  }\n}\n\n/**\n * Converts a file system pattern to an URL pattern string.\n *\n * @param segment - a string representing a file system pattern:\n * - `{param}` - for a required single parameter;\n * - `{{param}}` - for an optional single parameter;\n * - `{...wildcard}` - for multiple parameters, including none.\n *\n * @returns a string representing a URL pattern, respectively:\n * - `:param`;\n * - `:param?`;\n * - `*`.\n */\nexport function convertFSRouteSegmentToURLPatternFormat(segment: string): string {\n  let res = segment;\n\n  routeParamTypeMap.forEach((pattern, type) => {\n    res = res.replaceAll(pattern, getReplacer(type));\n  });\n\n  return res;\n}\n\n/**\n * Extracts the parameter name and its type from the route segment.\n *\n * @param segment - A part of the FS route URL.\n * @returns A map of parameter names and their types.\n */\nexport function extractParameterFromRouteSegment(segment: string): Readonly<Record<string, RouteParamType>> {\n  let _segment = segment;\n  const params: Record<string, RouteParamType> = {};\n\n  for (const [type, pattern] of routeParamTypeMap) {\n    const _pattern = new RegExp(pattern.source, pattern.flags);\n    _segment = _segment.replaceAll(_pattern, (match) => {\n      const key = match.replaceAll(pattern, getReplacer(type));\n      params[key] = type;\n      return '';\n    });\n  }\n\n  return params;\n}\n\n/**\n * A small helper function that clears route path of the control characters in\n * order to sort the routes alphabetically.\n */\nexport function cleanUp(path: string): string {\n  let res = path;\n\n  for (const pattern of routeParamTypeMap.values()) {\n    res = res.replaceAll(pattern, '$1');\n  }\n\n  return res;\n}\n"],
  "mappings": "AAAA,SAAS,sBAAsB;AAExB,MAAM,oBAAyD,oBAAI,IAAI;AAAA,EAC5E,CAAC,eAAe,UAAU,kBAAkB;AAAA;AAAA,EAC5C,CAAC,eAAe,UAAU,gBAAgB;AAAA;AAAA,EAC1C,CAAC,eAAe,UAAU,YAAY;AAAA;AACxC,CAAC;AAGD,SAAS,YAAY,MAA8B;AAEjD,UAAQ,MAAM;AAAA,IACZ,KAAK,eAAe;AAClB,aAAO;AAAA,IACT,KAAK,eAAe;AAClB,aAAO;AAAA,IACT,KAAK,eAAe;AAClB,aAAO;AAAA,EACX;AACF;AAeO,SAAS,wCAAwC,SAAyB;AAC/E,MAAI,MAAM;AAEV,oBAAkB,QAAQ,CAAC,SAAS,SAAS;AAC3C,UAAM,IAAI,WAAW,SAAS,YAAY,IAAI,CAAC;AAAA,EACjD,CAAC;AAED,SAAO;AACT;AAQO,SAAS,iCAAiC,SAA2D;AAC1G,MAAI,WAAW;AACf,QAAM,SAAyC,CAAC;AAEhD,aAAW,CAAC,MAAM,OAAO,KAAK,mBAAmB;AAC/C,UAAM,WAAW,IAAI,OAAO,QAAQ,QAAQ,QAAQ,KAAK;AACzD,eAAW,SAAS,WAAW,UAAU,CAAC,UAAU;AAClD,YAAM,MAAM,MAAM,WAAW,SAAS,YAAY,IAAI,CAAC;AACvD,aAAO,GAAG,IAAI;AACd,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAMO,SAAS,QAAQ,MAAsB;AAC5C,MAAI,MAAM;AAEV,aAAW,WAAW,kBAAkB,OAAO,GAAG;AAChD,UAAM,IAAI,WAAW,SAAS,IAAI;AAAA,EACpC;AAEA,SAAO;AACT;",
  "names": []
}
