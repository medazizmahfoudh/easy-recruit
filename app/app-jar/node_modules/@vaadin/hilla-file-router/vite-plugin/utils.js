import { RouteParamType } from "../shared/routeParamType.js";
const routeParamTypeMap = /* @__PURE__ */ new Map([
  [RouteParamType.Wildcard, /\{\.\.\.(.+)\}/gu],
  // e.g. "{...wildcard}"
  [RouteParamType.Optional, /\{\{(.+)\}\}/gu],
  // e.g. "{{param}}"
  [RouteParamType.Required, /\{(.+)\}/gu]
  // e.g. "{param}"
]);
function getReplacer(type) {
  switch (type) {
    case RouteParamType.Wildcard:
      return "*";
    case RouteParamType.Optional:
      return ":$1?";
    case RouteParamType.Required:
      return ":$1";
  }
}
function convertFSRouteSegmentToURLPatternFormat(segment) {
  let res = segment;
  routeParamTypeMap.forEach((pattern, type) => {
    res = res.replaceAll(pattern, getReplacer(type));
  });
  return res;
}
function extractParameterFromRouteSegment(segment) {
  let _segment = segment;
  const params = {};
  for (const [type, pattern] of routeParamTypeMap) {
    const _pattern = new RegExp(pattern.source, pattern.flags);
    _segment = _segment.replaceAll(_pattern, (match) => {
      const key = match.replaceAll(pattern, getReplacer(type));
      params[key] = type;
      return "";
    });
  }
  return params;
}
function cleanUp(path) {
  let res = path;
  for (const pattern of routeParamTypeMap.values()) {
    res = res.replaceAll(pattern, "$1");
  }
  return res;
}
export {
  cleanUp,
  convertFSRouteSegmentToURLPatternFormat,
  extractParameterFromRouteSegment,
  routeParamTypeMap
};
//# sourceMappingURL=utils.js.map
