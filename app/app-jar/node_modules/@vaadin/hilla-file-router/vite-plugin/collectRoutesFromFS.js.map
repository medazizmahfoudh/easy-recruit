{
  "version": 3,
  "sources": ["../src/vite-plugin/collectRoutesFromFS.ts"],
  "sourcesContent": ["import { opendir, readFile } from 'node:fs/promises';\nimport { basename, extname, relative } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { Logger } from 'vite';\nimport { RouteParamType } from '../shared/routeParamType.js';\nimport { cleanUp, routeParamTypeMap } from './utils.js';\n\nexport type RouteMeta = Readonly<{\n  path: string;\n  file?: URL;\n  layout?: URL;\n  flowLayout?: boolean;\n  children?: readonly RouteMeta[];\n}>;\n\n/**\n * Routes collector options.\n */\nexport type CollectRoutesOptions = Readonly<{\n  /**\n   * The list of extensions for files that will be collected as routes.\n   */\n  extensions: readonly string[];\n  /**\n   * The parent directory of the current directory. This is a\n   * nested parameter used inside the function only.\n   */\n  parent?: URL;\n  /**\n   * The Vite logger instance.\n   */\n  logger: Logger;\n}>;\n\nasync function checkFile(url: URL | undefined, logger: Logger): Promise<URL | undefined> {\n  if (url) {\n    const contents = await readFile(url, 'utf-8');\n    if (contents.trim() === '') {\n      return undefined;\n    } else if (!contents.includes('export default')) {\n      logger.error(`The file \"${String(url)}\" should contain a default export of a component`);\n      return undefined;\n    }\n  }\n\n  return url;\n}\n\nconst collator = new Intl.Collator('en-US');\n\nconst warningFor = ['.ts', '.js'];\n\n/**\n * Collect route metadata from the file system and build a route tree.\n *\n * It accepts files that start with `@` as special files.\n * - `@layout` contains a component that wraps the child components.\n * - `@index` contains a component that will be used as the index page of the directory.\n *\n * It accepts files that start with `_` as private files. They will be ignored.\n *\n * @param dir - The directory to collect routes from.\n * @param options - The options object.\n *\n * @returns The route metadata array.\n */\nexport default async function collectRoutesFromFS(\n  dir: URL,\n  { extensions, logger, parent = dir }: CollectRoutesOptions,\n): Promise<readonly RouteMeta[]> {\n  const path = relative(fileURLToPath(parent), fileURLToPath(dir));\n  let children: RouteMeta[] = [];\n  let layout: URL | undefined;\n\n  for await (const d of await opendir(dir)) {\n    if (d.name.startsWith('_')) {\n      continue;\n    }\n\n    const extension = extname(d.name);\n    const name = basename(d.name, extension);\n\n    if (extension !== '' && !extensions.includes(extension)) {\n      if (warningFor.includes(extension)) {\n        logger.warn(\n          `File System based router expects only JSX files in 'Frontend/views/' directory, such as '*.tsx' and '*.jsx'. The file '${d.name}' will be ignored by router, as it doesn't match this convention. Please consider storing it in another directory.`,\n        );\n      }\n      continue;\n    }\n\n    if (children.some(({ path: p }) => p === name)) {\n      throw new Error(`You cannot create a file and a directory with the same name (\"${name}\"). Use \"@index\" instead`);\n    }\n\n    if (d.isDirectory()) {\n      const directoryRoutes = await collectRoutesFromFS(new URL(`${name}/`, dir), {\n        extensions,\n        logger,\n        parent: dir,\n      });\n      if (directoryRoutes.length === 1 && directoryRoutes[0].layout) {\n        const [layoutRoute] = directoryRoutes;\n        children.push(layoutRoute);\n      } else if (directoryRoutes.length > 0) {\n        children.push({ path: name, children: directoryRoutes });\n      }\n      continue;\n    }\n\n    const file = new URL(d.name, dir);\n    const url = await checkFile(file, logger);\n    if (url === undefined) {\n      continue;\n    }\n    const optionalParamType = routeParamTypeMap.get(RouteParamType.Optional)!;\n\n    if (\n      (name === '@index' && children.some(({ path: p }) => p.search(optionalParamType) >= 0)) ||\n      (name.search(optionalParamType) >= 0 && children.some(({ path: p }) => p === ''))\n    ) {\n      throw new Error('You cannot create an `@index` file in a directory with optional parameters');\n    } else if (name === '@layout') {\n      layout = file;\n    } else if (name === '@index') {\n      children.push({\n        path: '',\n        file,\n      });\n    } else if (name.startsWith('@')) {\n      throw new Error(\n        'Symbol \"@\" is reserved for special directories and files; only \"@layout\" and \"@index\" are allowed',\n      );\n    } else {\n      children.push({\n        path: name,\n        file,\n      });\n    }\n  }\n\n  [children, layout] = await Promise.all([\n    Promise.all(\n      children.map(async (child) => ({\n        ...child,\n        file: child.file,\n        layout: await checkFile(child.layout, logger),\n      })),\n    ),\n    checkFile(layout, logger),\n  ]);\n\n  children = children.sort(({ path: a }, { path: b }) => collator.compare(cleanUp(a), cleanUp(b)));\n\n  // If a layout was found, wrap the other routes with the layout route.\n  return layout ? [{ path, layout, children }] : children;\n}\n"],
  "mappings": "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",
  "names": []
}
