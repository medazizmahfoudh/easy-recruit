{
  "version": 3,
  "sources": ["../src/vite-plugin/createViewConfigJson.ts"],
  "sourcesContent": ["import { readFile } from 'node:fs/promises';\nimport { Script } from 'node:vm';\nimport ts, { type Node } from 'typescript';\nimport { convertComponentNameToTitle } from '../shared/convertComponentNameToTitle.js';\nimport type { ServerViewConfig } from '../shared/internal.js';\nimport { transformTree } from '../shared/transformTree.js';\nimport type { ViewConfig } from '../types.js';\nimport type { RouteMeta } from './collectRoutesFromFS.js';\nimport { convertFSRouteSegmentToURLPatternFormat, extractParameterFromRouteSegment } from './utils.js';\n\n/**\n * Walks the TypeScript AST using the deep-first search algorithm.\n *\n * @param node - The node to walk.\n */\nfunction* walkAST(node: Node): Generator<Node> {\n  yield node;\n\n  for (const child of node.getChildren()) {\n    yield* walkAST(child);\n  }\n}\n\n/**\n * Creates a map of all leaf routes to their configuration. This file is used by the server to provide server-side\n * routes along with managing the client-side routes.\n *\n * @param views - The route metadata tree.\n */\nexport default async function createViewConfigJson(views: readonly RouteMeta[]): Promise<string> {\n  const res = await transformTree<readonly RouteMeta[], Promise<readonly ServerViewConfig[]>>(\n    views,\n    async (routes, next) =>\n      await Promise.all(\n        routes.map(async ({ path, file, layout, children, flowLayout }) => {\n          const newChildren = children ? await next(...children) : undefined;\n\n          if (!file && !layout) {\n            return {\n              route: convertFSRouteSegmentToURLPatternFormat(path),\n              params: extractParameterFromRouteSegment(path),\n              children: newChildren,\n            } satisfies ServerViewConfig;\n          }\n\n          const sourceFile = ts.createSourceFile(\n            'f.ts',\n            await readFile(file ?? layout!, 'utf8'),\n            ts.ScriptTarget.ESNext,\n            true,\n          );\n          let config: ViewConfig | undefined;\n          let waitingForIdentifier = false;\n          let componentName: string | undefined;\n\n          for (const node of walkAST(sourceFile)) {\n            if (ts.isVariableDeclaration(node) && ts.isIdentifier(node.name) && node.name.text === 'config') {\n              if (node.initializer && ts.isObjectLiteralExpression(node.initializer)) {\n                const code = node.initializer.getText(sourceFile);\n                const script = new Script(`(${code})`);\n                config = script.runInThisContext() as ViewConfig;\n                if (config.flowLayout === undefined) {\n                  const copy = JSON.parse(JSON.stringify(config));\n                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                  copy.flowLayout = flowLayout ?? false;\n                  config = copy;\n                }\n              }\n            } else if (node.getText(sourceFile).startsWith('export default')) {\n              waitingForIdentifier = true;\n            } else if (waitingForIdentifier && ts.isIdentifier(node)) {\n              componentName = node.text;\n              waitingForIdentifier = false;\n            }\n          }\n\n          if (config === undefined) {\n            config = { flowLayout: flowLayout ?? false };\n          }\n\n          let title: string;\n\n          if (config.title) {\n            ({ title } = config);\n          } else {\n            if (!componentName) {\n              throw new Error(\n                `The file \"${String(file ?? layout!)}\" must contain a default export of a component whose name will be used as title by default`,\n              );\n            }\n\n            title = convertComponentNameToTitle(componentName);\n          }\n\n          return {\n            route: convertFSRouteSegmentToURLPatternFormat(path),\n            ...config,\n            params: extractParameterFromRouteSegment(config.route ?? path),\n            title,\n            children: newChildren ?? (layout ? [] : undefined),\n          } satisfies ServerViewConfig;\n        }),\n      ),\n  );\n\n  return JSON.stringify(res, undefined, 2);\n}\n"],
  "mappings": "AAAA,SAAS,gBAAgB;AACzB,SAAS,cAAc;AACvB,OAAO,YAAuB;AAC9B,SAAS,mCAAmC;AAE5C,SAAS,qBAAqB;AAG9B,SAAS,yCAAyC,wCAAwC;AAO1F,UAAU,QAAQ,MAA6B;AAC7C,QAAM;AAEN,aAAW,SAAS,KAAK,YAAY,GAAG;AACtC,WAAO,QAAQ,KAAK;AAAA,EACtB;AACF;AAQA,eAAO,qBAA4C,OAA8C;AAC/F,QAAM,MAAM,MAAM;AAAA,IAChB;AAAA,IACA,OAAO,QAAQ,SACb,MAAM,QAAQ;AAAA,MACZ,OAAO,IAAI,OAAO,EAAE,MAAM,MAAM,QAAQ,UAAU,WAAW,MAAM;AACjE,cAAM,cAAc,WAAW,MAAM,KAAK,GAAG,QAAQ,IAAI;AAEzD,YAAI,CAAC,QAAQ,CAAC,QAAQ;AACpB,iBAAO;AAAA,YACL,OAAO,wCAAwC,IAAI;AAAA,YACnD,QAAQ,iCAAiC,IAAI;AAAA,YAC7C,UAAU;AAAA,UACZ;AAAA,QACF;AAEA,cAAM,aAAa,GAAG;AAAA,UACpB;AAAA,UACA,MAAM,SAAS,QAAQ,QAAS,MAAM;AAAA,UACtC,GAAG,aAAa;AAAA,UAChB;AAAA,QACF;AACA,YAAI;AACJ,YAAI,uBAAuB;AAC3B,YAAI;AAEJ,mBAAW,QAAQ,QAAQ,UAAU,GAAG;AACtC,cAAI,GAAG,sBAAsB,IAAI,KAAK,GAAG,aAAa,KAAK,IAAI,KAAK,KAAK,KAAK,SAAS,UAAU;AAC/F,gBAAI,KAAK,eAAe,GAAG,0BAA0B,KAAK,WAAW,GAAG;AACtE,oBAAM,OAAO,KAAK,YAAY,QAAQ,UAAU;AAChD,oBAAM,SAAS,IAAI,OAAO,IAAI,IAAI,GAAG;AACrC,uBAAS,OAAO,iBAAiB;AACjC,kBAAI,OAAO,eAAe,QAAW;AACnC,sBAAM,OAAO,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AAE9C,qBAAK,aAAa,cAAc;AAChC,yBAAS;AAAA,cACX;AAAA,YACF;AAAA,UACF,WAAW,KAAK,QAAQ,UAAU,EAAE,WAAW,gBAAgB,GAAG;AAChE,mCAAuB;AAAA,UACzB,WAAW,wBAAwB,GAAG,aAAa,IAAI,GAAG;AACxD,4BAAgB,KAAK;AACrB,mCAAuB;AAAA,UACzB;AAAA,QACF;AAEA,YAAI,WAAW,QAAW;AACxB,mBAAS,EAAE,YAAY,cAAc,MAAM;AAAA,QAC7C;AAEA,YAAI;AAEJ,YAAI,OAAO,OAAO;AAChB,WAAC,EAAE,MAAM,IAAI;AAAA,QACf,OAAO;AACL,cAAI,CAAC,eAAe;AAClB,kBAAM,IAAI;AAAA,cACR,aAAa,OAAO,QAAQ,MAAO,CAAC;AAAA,YACtC;AAAA,UACF;AAEA,kBAAQ,4BAA4B,aAAa;AAAA,QACnD;AAEA,eAAO;AAAA,UACL,OAAO,wCAAwC,IAAI;AAAA,UACnD,GAAG;AAAA,UACH,QAAQ,iCAAiC,OAAO,SAAS,IAAI;AAAA,UAC7D;AAAA,UACA,UAAU,gBAAgB,SAAS,CAAC,IAAI;AAAA,QAC1C;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACJ;AAEA,SAAO,KAAK,UAAU,KAAK,QAAW,CAAC;AACzC;",
  "names": []
}
