import { existsSync } from "node:fs";
import { mkdir, readFile, writeFile } from "node:fs/promises";
import applyLayouts from "./applyLayouts.js";
import collectRoutesFromFS from "./collectRoutesFromFS.js";
import createRoutesFromMeta from "./createRoutesFromMeta.js";
import createViewConfigJson from "./createViewConfigJson.js";
async function generateRuntimeFile(url, data, forceWrite) {
  await mkdir(new URL("./", url), { recursive: true });
  let shouldWrite = forceWrite ?? false;
  if (!forceWrite) {
    let contents;
    try {
      contents = await readFile(url, "utf-8");
    } catch (e) {
      if (!(e != null && typeof e === "object" && "code" in e && e.code === "ENOENT")) {
        throw e;
      }
    }
    shouldWrite = contents !== data;
  }
  if (shouldWrite) {
    await writeFile(url, data, "utf-8");
  }
  return shouldWrite;
}
async function generateRuntimeFiles(viewsDir, urls, extensions, logger, debug) {
  let routeMeta = existsSync(viewsDir) ? await collectRoutesFromFS(viewsDir, { extensions, logger }) : [];
  if (debug) {
    logger.info("Collected file-based routes");
  }
  routeMeta = await applyLayouts(routeMeta, urls.layouts);
  const runtimeRoutesCode = createRoutesFromMeta(routeMeta, urls);
  const viewConfigJson = await createViewConfigJson(routeMeta);
  const jsonWritten = await generateRuntimeFile(urls.json, viewConfigJson);
  if (debug) {
    logger.info(`Frontend route list is generated: ${String(urls.json)}`);
  }
  await generateRuntimeFile(urls.code, runtimeRoutesCode, jsonWritten);
  if (debug) {
    logger.info(`File Route module is generated: ${String(urls.code)}`);
  }
}
export {
  generateRuntimeFiles
};
//# sourceMappingURL=generateRuntimeFiles.js.map
