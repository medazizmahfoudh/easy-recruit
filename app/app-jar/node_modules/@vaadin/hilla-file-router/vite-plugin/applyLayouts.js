import { existsSync } from "node:fs";
import { readFile } from "node:fs/promises";
function stripLeadingSlash(path) {
  return path.startsWith("/") ? path.slice(1) : path;
}
function enableFlowLayout(route) {
  const routeWithFlowLayout = {
    ...route,
    flowLayout: true
  };
  return route.children ? {
    ...routeWithFlowLayout,
    children: route.children.map(enableFlowLayout)
  } : routeWithFlowLayout;
}
function layoutExists(layoutPaths, path) {
  const splitPath = path.split("/");
  return layoutPaths.some((layout) => {
    if (layout.length === 0) {
      return true;
    }
    const splitLayout = layout.split("/");
    if (splitLayout.length > splitPath.length) {
      return false;
    }
    for (let i = 0; i < splitLayout.length; i++) {
      if (splitPath[i] !== splitLayout[i]) {
        return false;
      }
    }
    return true;
  });
}
async function applyLayouts(routeMeta, layoutsFile) {
  if (!existsSync(layoutsFile)) {
    return routeMeta;
  }
  const layoutContents = await readFile(layoutsFile, "utf-8");
  const availableLayouts = JSON.parse(layoutContents);
  const layoutPaths = availableLayouts.map((layout) => stripLeadingSlash(layout.path));
  return routeMeta.map(
    (route) => layoutExists(layoutPaths, stripLeadingSlash(route.path)) ? enableFlowLayout(route) : route
  );
}
export {
  applyLayouts as default
};
//# sourceMappingURL=applyLayouts.js.map
