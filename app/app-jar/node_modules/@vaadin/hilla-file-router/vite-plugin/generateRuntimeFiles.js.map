{
  "version": 3,
  "sources": ["../src/vite-plugin/generateRuntimeFiles.ts"],
  "sourcesContent": ["import { existsSync } from 'node:fs';\nimport { mkdir, readFile, writeFile } from 'node:fs/promises';\nimport type { Logger } from 'vite';\nimport applyLayouts from './applyLayouts.js';\nimport collectRoutesFromFS from './collectRoutesFromFS.js';\nimport createRoutesFromMeta from './createRoutesFromMeta.js';\nimport createViewConfigJson from './createViewConfigJson.js';\n\n/**\n * The URLs of the files to generate.\n */\nexport type RuntimeFileUrls = Readonly<{\n  /**\n   * The URL of the JSON file with the leaf routes and their metadata. This file\n   * will be processed by the server to provide the final route configuration.\n   */\n  json: URL;\n  /**\n   * The URL of the module with the routes tree in a framework-agnostic format.\n   */\n  code: URL;\n  /**\n   * The URL of the JSON file containing server layout path information.\n   */\n  layouts: URL;\n}>;\n\n/**\n * Generates a file conditionally. If the file already exists and its content is the same as the\n * given data, the file will not be overwritten. It is useful to avoid unnecessary server\n * reboot during development.\n *\n * @param url - The URL of the file to generate.\n * @param data - The data to write to the file.\n * @param forceWrite - true to force writing the file even if there are no changes\n * @returns true if the file was written, false otherwise.\n */\nasync function generateRuntimeFile(url: URL, data: string, forceWrite?: boolean): Promise<boolean> {\n  await mkdir(new URL('./', url), { recursive: true });\n  let shouldWrite = forceWrite ?? false;\n  if (!forceWrite) {\n    let contents: string | undefined;\n    try {\n      contents = await readFile(url, 'utf-8');\n    } catch (e: unknown) {\n      if (!(e != null && typeof e === 'object' && 'code' in e && e.code === 'ENOENT')) {\n        throw e;\n      }\n    }\n    shouldWrite = contents !== data;\n  }\n  if (shouldWrite) {\n    await writeFile(url, data, 'utf-8');\n  }\n\n  return shouldWrite;\n}\n\n/**\n * Collects all file-based routes from the given directory, and based on them generates two files\n * described by {@link RuntimeFileUrls} type.\n * @param viewsDir - The directory that contains file-based routes (views).\n * @param urls - The URLs of the files to generate.\n * @param extensions - The list of extensions that will be collected as routes.\n * @param logger - The Vite logger instance.\n * @param debug - true to debug\n */\nexport async function generateRuntimeFiles(\n  viewsDir: URL,\n  urls: RuntimeFileUrls,\n  extensions: readonly string[],\n  logger: Logger,\n  debug: boolean,\n): Promise<void> {\n  let routeMeta = existsSync(viewsDir) ? await collectRoutesFromFS(viewsDir, { extensions, logger }) : [];\n  if (debug) {\n    logger.info('Collected file-based routes');\n  }\n  routeMeta = await applyLayouts(routeMeta, urls.layouts);\n  const runtimeRoutesCode = createRoutesFromMeta(routeMeta, urls);\n  const viewConfigJson = await createViewConfigJson(routeMeta);\n\n  const jsonWritten = await generateRuntimeFile(urls.json, viewConfigJson);\n  if (debug) {\n    logger.info(`Frontend route list is generated: ${String(urls.json)}`);\n  }\n  // If the metadata has changed, we need to write the TS file also to make Vite HMR updates work properly.\n  // Even though the contents of the TS file does not change, the contents of the files imported in the TS\n  // files changes and the routes must be re-applied to the React router\n  await generateRuntimeFile(urls.code, runtimeRoutesCode, jsonWritten);\n  if (debug) {\n    logger.info(`File Route module is generated: ${String(urls.code)}`);\n  }\n}\n"],
  "mappings": "AAAA,SAAS,kBAAkB;AAC3B,SAAS,OAAO,UAAU,iBAAiB;AAE3C,OAAO,kBAAkB;AACzB,OAAO,yBAAyB;AAChC,OAAO,0BAA0B;AACjC,OAAO,0BAA0B;AA+BjC,eAAe,oBAAoB,KAAU,MAAc,YAAwC;AACjG,QAAM,MAAM,IAAI,IAAI,MAAM,GAAG,GAAG,EAAE,WAAW,KAAK,CAAC;AACnD,MAAI,cAAc,cAAc;AAChC,MAAI,CAAC,YAAY;AACf,QAAI;AACJ,QAAI;AACF,iBAAW,MAAM,SAAS,KAAK,OAAO;AAAA,IACxC,SAAS,GAAY;AACnB,UAAI,EAAE,KAAK,QAAQ,OAAO,MAAM,YAAY,UAAU,KAAK,EAAE,SAAS,WAAW;AAC/E,cAAM;AAAA,MACR;AAAA,IACF;AACA,kBAAc,aAAa;AAAA,EAC7B;AACA,MAAI,aAAa;AACf,UAAM,UAAU,KAAK,MAAM,OAAO;AAAA,EACpC;AAEA,SAAO;AACT;AAWA,eAAsB,qBACpB,UACA,MACA,YACA,QACA,OACe;AACf,MAAI,YAAY,WAAW,QAAQ,IAAI,MAAM,oBAAoB,UAAU,EAAE,YAAY,OAAO,CAAC,IAAI,CAAC;AACtG,MAAI,OAAO;AACT,WAAO,KAAK,6BAA6B;AAAA,EAC3C;AACA,cAAY,MAAM,aAAa,WAAW,KAAK,OAAO;AACtD,QAAM,oBAAoB,qBAAqB,WAAW,IAAI;AAC9D,QAAM,iBAAiB,MAAM,qBAAqB,SAAS;AAE3D,QAAM,cAAc,MAAM,oBAAoB,KAAK,MAAM,cAAc;AACvE,MAAI,OAAO;AACT,WAAO,KAAK,qCAAqC,OAAO,KAAK,IAAI,CAAC,EAAE;AAAA,EACtE;AAIA,QAAM,oBAAoB,KAAK,MAAM,mBAAmB,WAAW;AACnE,MAAI,OAAO;AACT,WAAO,KAAK,mCAAmC,OAAO,KAAK,IAAI,CAAC,EAAE;AAAA,EACpE;AACF;",
  "names": []
}
