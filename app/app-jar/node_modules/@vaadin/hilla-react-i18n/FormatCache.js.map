{
  "version": 3,
  "sources": ["src/FormatCache.ts"],
  "sourcesContent": ["import { IntlMessageFormat } from 'intl-messageformat';\n\nexport class FormatCache {\n  readonly #language: string;\n  readonly #formats = new Map<string, IntlMessageFormat>();\n\n  constructor(language: string) {\n    // Ensure that the language is supported by Intl.NumberFormat, which IntlMessageFormat uses internally\n    // Fall back to navigator.language if the given language is not supported\n    let supportedLocales: string[] = [];\n    try {\n      supportedLocales = Intl.NumberFormat.supportedLocalesOf(language);\n    } catch (e) {}\n    this.#language = supportedLocales.length > 0 ? supportedLocales[0] : navigator.language;\n  }\n\n  getFormat(translation: string): IntlMessageFormat {\n    let format = this.#formats.get(translation);\n    if (!format) {\n      format = new IntlMessageFormat(translation, this.#language);\n      this.#formats.set(translation, format);\n    }\n    return format;\n  }\n}\n"],
  "mappings": "AAAA,SAAS,yBAAyB;AAE3B,MAAM,YAAY;AAAA,EACd;AAAA,EACA,WAAW,oBAAI,IAA+B;AAAA,EAEvD,YAAY,UAAkB;AAG5B,QAAI,mBAA6B,CAAC;AAClC,QAAI;AACF,yBAAmB,KAAK,aAAa,mBAAmB,QAAQ;AAAA,IAClE,SAAS,GAAG;AAAA,IAAC;AACb,SAAK,YAAY,iBAAiB,SAAS,IAAI,iBAAiB,CAAC,IAAI,UAAU;AAAA,EACjF;AAAA,EAEA,UAAU,aAAwC;AAChD,QAAI,SAAS,KAAK,SAAS,IAAI,WAAW;AAC1C,QAAI,CAAC,QAAQ;AACX,eAAS,IAAI,kBAAkB,aAAa,KAAK,SAAS;AAC1D,WAAK,SAAS,IAAI,aAAa,MAAM;AAAA,IACvC;AACA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
