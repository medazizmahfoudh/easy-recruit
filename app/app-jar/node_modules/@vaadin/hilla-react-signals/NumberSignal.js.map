{
  "version": 3,
  "sources": ["src/NumberSignal.ts"],
  "sourcesContent": ["import { createIncrementStateEvent, type StateEvent } from './events.js';\nimport { $processServerResponse, $update } from './FullStackSignal.js';\nimport { ValueSignal } from './ValueSignal.js';\n\n/**\n * A signal that holds a number value. The underlying\n * value of this signal is stored and updated as a\n * shared value on the server.\n *\n * After obtaining the NumberSignal instance from\n * a server-side service that returns one, the value\n * can be updated using the `value` property,\n * and it can be read with or without the\n * `value` property (similar to a normal signal):\n *\n * @example\n * ```tsx\n *  const counter = CounterService.counter();\n *\n * return (\n *    <Button onClick={() => counter.incrementBy(1)}>\n *      Click count: { counter }\n *    </Button>\n *    <Button onClick={() => counter.value = 0}>Reset</Button>\n * );\n * ```\n */\nexport class NumberSignal extends ValueSignal<number> {\n  readonly #sentIncrementEvents = new Map<string, StateEvent<number>>();\n  /**\n   * Increments the value by the specified delta. The delta can be negative to\n   * decrease the value.\n   *\n   * This method differs from using the `++` or `+=` operators directly on the\n   * signal value. It performs an atomic operation to prevent conflicts from\n   * concurrent changes, ensuring that other users' modifications are not\n   * accidentally overwritten.\n   *\n   * @param delta - The delta to increment the value by. The delta can be\n   * negative.\n   */\n  incrementBy(delta: number): void {\n    if (delta === 0) {\n      return;\n    }\n    this.setValueLocal(this.value + delta);\n    const event = createIncrementStateEvent(delta);\n    this.#sentIncrementEvents.set(event.id, event);\n    this[$update](event);\n  }\n\n  protected override [$processServerResponse](event: StateEvent<number>): void {\n    if (event.accepted && event.type === 'increment') {\n      if (this.#sentIncrementEvents.has(event.id)) {\n        this.#sentIncrementEvents.delete(event.id);\n        return;\n      }\n      this.setValueLocal(this.value + event.value);\n    } else {\n      super[$processServerResponse](event);\n    }\n  }\n}\n"],
  "mappings": "AAAA,SAAS,iCAAkD;AAC3D,SAAS,wBAAwB,eAAe;AAChD,SAAS,mBAAmB;AAyBrB,MAAM,qBAAqB,YAAoB;AAAA,EAC3C,uBAAuB,oBAAI,IAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAapE,YAAY,OAAqB;AAC/B,QAAI,UAAU,GAAG;AACf;AAAA,IACF;AACA,SAAK,cAAc,KAAK,QAAQ,KAAK;AACrC,UAAM,QAAQ,0BAA0B,KAAK;AAC7C,SAAK,qBAAqB,IAAI,MAAM,IAAI,KAAK;AAC7C,SAAK,OAAO,EAAE,KAAK;AAAA,EACrB;AAAA,EAEA,CAAoB,sBAAsB,EAAE,OAAiC;AAC3E,QAAI,MAAM,YAAY,MAAM,SAAS,aAAa;AAChD,UAAI,KAAK,qBAAqB,IAAI,MAAM,EAAE,GAAG;AAC3C,aAAK,qBAAqB,OAAO,MAAM,EAAE;AACzC;AAAA,MACF;AACA,WAAK,cAAc,KAAK,QAAQ,MAAM,KAAK;AAAA,IAC7C,OAAO;AACL,YAAM,sBAAsB,EAAE,KAAK;AAAA,IACrC;AAAA,EACF;AACF;",
  "names": []
}
