import type { Simplify } from 'type-fest';
/**
 * Creates a new state event type.
 */
type CreateStateEventType<V, T extends string, C extends Record<string, unknown> = Record<never, never>> = Simplify<Readonly<{
    id: string;
    type: T;
    value: V;
    accepted: boolean;
}> & Readonly<C>>;
/**
 * A state event received from the server describing the current state of the
 * signal.
 */
export type SnapshotStateEvent<T> = CreateStateEventType<T, 'snapshot'>;
/**
 * A state event defines a new value of the signal shared with the server. The
 */
export type SetStateEvent<T> = CreateStateEventType<T, 'set'>;
export declare function createSetStateEvent<T>(value: T): SetStateEvent<T>;
export type ReplaceStateEvent<T> = CreateStateEventType<T, 'replace', {
    expected: T;
}>;
export declare function createReplaceStateEvent<T>(expected: T, value: T): ReplaceStateEvent<T>;
export type IncrementStateEvent = CreateStateEventType<number, 'increment'>;
export declare function createIncrementStateEvent(delta: number): IncrementStateEvent;
/**
 * An object that describes the change of the signal state.
 */
export type StateEvent<T> = IncrementStateEvent | ReplaceStateEvent<T> | SetStateEvent<T> | SnapshotStateEvent<T>;
export {};
//# sourceMappingURL=events.d.ts.map