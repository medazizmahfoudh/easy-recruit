import { createIncrementStateEvent } from "./events.js";
import { $processServerResponse, $update } from "./FullStackSignal.js";
import { ValueSignal } from "./ValueSignal.js";
class NumberSignal extends ValueSignal {
  #sentIncrementEvents = /* @__PURE__ */ new Map();
  /**
   * Increments the value by the specified delta. The delta can be negative to
   * decrease the value.
   *
   * This method differs from using the `++` or `+=` operators directly on the
   * signal value. It performs an atomic operation to prevent conflicts from
   * concurrent changes, ensuring that other users' modifications are not
   * accidentally overwritten.
   *
   * @param delta - The delta to increment the value by. The delta can be
   * negative.
   */
  incrementBy(delta) {
    if (delta === 0) {
      return;
    }
    this.setValueLocal(this.value + delta);
    const event = createIncrementStateEvent(delta);
    this.#sentIncrementEvents.set(event.id, event);
    this[$update](event);
  }
  [$processServerResponse](event) {
    if (event.accepted && event.type === "increment") {
      if (this.#sentIncrementEvents.has(event.id)) {
        this.#sentIncrementEvents.delete(event.id);
        return;
      }
      this.setValueLocal(this.value + event.value);
    } else {
      super[$processServerResponse](event);
    }
  }
}
export {
  NumberSignal
};
//# sourceMappingURL=NumberSignal.js.map
