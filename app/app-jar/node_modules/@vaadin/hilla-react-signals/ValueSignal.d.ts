import { type StateEvent } from './events.js';
import { $processServerResponse, FullStackSignal } from './FullStackSignal.js';
/**
 * An operation subscription that can be canceled.
 */
export interface OperationSubscription {
    cancel(): void;
}
/**
 * A full-stack signal that holds an arbitrary value.
 */
export declare class ValueSignal<T> extends FullStackSignal<T> {
    #private;
    /**
     * Sets the value.
     * Note that the value change event that is propagated to the server as the
     * result of this operation is not taking the last seen value into account and
     * will overwrite the shared value on the server unconditionally (AKA: "Last
     * Write Wins"). If you need to perform a conditional update, use the
     * `replace` method instead.
     *
     * @param value - The new value.
     */
    set(value: T): void;
    /**
     * Replaces the value with a new one only if the current value is equal to the
     * expected value.
     *
     * @param expected - The expected value.
     * @param newValue - The new value.
     */
    replace(expected: T, newValue: T): void;
    /**
     * Tries to update the value by applying the callback function to the current
     * value. In case of a concurrent change, the callback is run again with an
     * updated input value. This is repeated until the result can be applied
     * without concurrent changes, or the operation is canceled.
     *
     * Note that there is no guarantee that cancel() will be effective always,
     * since a succeeding operation might already be on its way to the server.
     *
     * @param callback - The function that is applied on the current value to
     *                   produce the new value.
     * @returns An operation subscription that can be canceled.
     */
    update(callback: (value: T) => T): OperationSubscription;
    protected [$processServerResponse](event: StateEvent<T>): void;
}
//# sourceMappingURL=ValueSignal.d.ts.map