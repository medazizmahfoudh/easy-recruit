import type { ConnectClient, Subscription } from '@vaadin/hilla-frontend';
import { Signal } from './core.js';
import { type StateEvent } from './events.js';
/**
 * An abstraction of a signal that tracks the number of subscribers, and calls
 * the provided `onSubscribe` and `onUnsubscribe` callbacks for the first
 * subscription and the last unsubscription, respectively.
 * @internal
 */
export declare abstract class DependencyTrackingSignal<T> extends Signal<T> {
    #private;
    protected constructor(value: T | undefined, onFirstSubscribe: () => void, onLastUnsubscribe: () => void);
    protected S(node: unknown): void;
    protected U(node: unknown): void;
}
/**
 * An object that describes a data object to connect to the signal provider
 * service.
 */
export type ServerConnectionConfig = Readonly<{
    /**
     * The client instance to be used for communication.
     */
    client: ConnectClient;
    /**
     * The name of the signal provider service endpoint.
     */
    endpoint: string;
    /**
     * The name of the signal provider service method.
     */
    method: string;
    /**
     * Optional object with method call arguments to be sent to the endpoint
     * method that provides the signal when subscribing to it.
     */
    params?: Record<string, unknown>;
}>;
/**
 * A server connection manager.
 */
declare class ServerConnection<T> {
    #private;
    constructor(id: string, config: ServerConnectionConfig);
    get subscription(): Subscription<StateEvent<T>> | undefined;
    connect(): Subscription<StateEvent<T>>;
    update(event: StateEvent<T>): Promise<void>;
    disconnect(): void;
}
export declare const $update: unique symbol;
export declare const $processServerResponse: unique symbol;
/**
 * A signal that holds a shared value. Each change to the value is propagated to
 * the server-side signal provider. At the same time, each change received from
 * the server-side signal provider is propagated to the local signal and it's
 * subscribers.
 *
 * @internal
 */
export declare abstract class FullStackSignal<T> extends DependencyTrackingSignal<T> {
    #private;
    /**
     * The unique identifier of the signal necessary to communicate with the
     * server.
     */
    readonly id: string;
    /**
     * The server connection manager.
     */
    readonly server: ServerConnection<T>;
    /**
     * Defines whether the signal is currently awaits a server-side response.
     */
    readonly pending: import("@preact/signals-core").ReadonlySignal<boolean>;
    /**
     * Defines whether the signal has an error.
     */
    readonly error: import("@preact/signals-core").ReadonlySignal<Error | undefined>;
    constructor(value: T | undefined, config: ServerConnectionConfig);
    /**
     * Sets the local value of the signal without sending any events to the server
     * @param value - The new value.
     * @internal
     */
    protected setValueLocal(value: T): void;
    /**
     * A method to update the server with the new value.
     *
     * @param event - The event to update the server with.
     */
    protected [$update](event: StateEvent<T>): void;
    /**
     * A method with to process the server response. The implementation is
     * specific for each signal type.
     *
     * @param event - The server response event.
     */
    protected abstract [$processServerResponse](event: StateEvent<T>): void;
}
export {};
//# sourceMappingURL=FullStackSignal.d.ts.map