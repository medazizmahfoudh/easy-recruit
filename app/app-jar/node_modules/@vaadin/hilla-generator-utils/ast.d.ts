import { type Node, type VisitResult, type SourceFile, type Statement, type TransformerFactory } from 'typescript';
export type TemplateSelector<T> = (statements: readonly Statement[]) => T;
export declare function template(code: string, transformers?: ReadonlyArray<TransformerFactory<SourceFile>>): readonly Statement[];
export declare function template<T>(code: string, selector: TemplateSelector<T>, transformers?: ReadonlyArray<TransformerFactory<SourceFile>>): T;
export declare function transform<T extends Node>(transformer: (node: Node) => VisitResult<Node | undefined>): TransformerFactory<T>;
export declare function traverse<T extends Node>(node: Node, visitor: (node: Node) => T | undefined): T | undefined;
//# sourceMappingURL=ast.d.ts.map