import ts, { type Identifier, type ImportDeclaration, type Statement } from 'typescript';
import type CodeConvertable from './CodeConvertable.js';
import StatementRecordManager, { type StatementRecord } from './StatementRecordManager.js';
export declare class NamedImportManager extends StatementRecordManager<ImportDeclaration> {
    #private;
    constructor(collator: Intl.Collator);
    add(path: string, specifier: string, isType?: boolean, uniqueId?: Identifier): Identifier;
    remove(path: string, specifier: string): void;
    clear(): void;
    getIdentifier(path: string, specifier: string): Identifier | undefined;
    iter(): IterableIterator<readonly [path: string, specifier: string, id: Identifier, isType: boolean]>;
    isType(path: string, specifier: string): boolean | undefined;
    paths(): IterableIterator<string>;
    specifiers(): IterableIterator<readonly [path: string, specifier: string]>;
    statementRecords(): IterableIterator<StatementRecord<ImportDeclaration>>;
    [Symbol.iterator](): IterableIterator<readonly [path: string, specifier: string, id: Identifier, isType: boolean]>;
}
export declare class NamespaceImportManager extends StatementRecordManager<ImportDeclaration> {
    #private;
    add(path: string, name: string, uniqueId?: Identifier): Identifier;
    clear(): void;
    getIdentifier(path: string): Identifier | undefined;
    iter(): IterableIterator<readonly [path: string, id: Identifier]>;
    paths(): IterableIterator<string>;
    statementRecords(): IterableIterator<StatementRecord<ImportDeclaration>>;
    remove(path: string): void;
    [Symbol.iterator](): IterableIterator<readonly [path: string, id: Identifier]>;
}
export declare class DefaultImportManager extends StatementRecordManager<ImportDeclaration> {
    #private;
    add(path: string, name: string, isType?: boolean, uniqueId?: Identifier): Identifier;
    getIdentifier(path: string): Identifier | undefined;
    remove(path: string): void;
    clear(): void;
    iter(): IterableIterator<readonly [path: string, id: Identifier, isType: boolean]>;
    isType(path: string): boolean | undefined;
    paths(): IterableIterator<string>;
    statementRecords(): IterableIterator<StatementRecord<ImportDeclaration>>;
    [Symbol.iterator](): IterableIterator<readonly [path: string, id: Identifier, isType: boolean]>;
}
export default class ImportManager implements CodeConvertable<readonly Statement[]> {
    #private;
    readonly default: DefaultImportManager;
    readonly named: NamedImportManager;
    readonly namespace: NamespaceImportManager;
    constructor(collator: Intl.Collator);
    toCode(): readonly Statement[];
    fromCode(source: ts.SourceFile): void;
}
//# sourceMappingURL=ImportManager.d.ts.map