{
  "version": 3,
  "sources": ["src/ast.ts"],
  "sourcesContent": ["import ts, {\n  type Node,\n  type VisitResult,\n  type SourceFile,\n  type Statement,\n  type TransformationContext,\n  type TransformerFactory,\n} from 'typescript';\n\nexport type TemplateSelector<T> = (statements: readonly Statement[]) => T;\n\nexport function template(\n  code: string,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): readonly Statement[];\nexport function template<T>(\n  code: string,\n  selector: TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T;\nexport function template<T>(\n  code: string,\n  selectorOrTransformers?: ReadonlyArray<TransformerFactory<SourceFile>> | TemplateSelector<T>,\n  transformers?: ReadonlyArray<TransformerFactory<SourceFile>>,\n): T | readonly Statement[] {\n  let selector: TemplateSelector<T> | undefined;\n\n  if (Array.isArray(selectorOrTransformers)) {\n    // eslint-disable-next-line no-param-reassign\n    transformers = selectorOrTransformers;\n  } else {\n    selector = selectorOrTransformers as TemplateSelector<T>;\n  }\n\n  let sourceFile = ts.createSourceFile('f.ts', code, ts.ScriptTarget.Latest, false);\n\n  if (transformers) {\n    [sourceFile] = ts.transform<SourceFile>(\n      sourceFile,\n      transformers as Array<TransformerFactory<SourceFile>>,\n    ).transformed;\n  }\n\n  return selector?.(sourceFile.statements) ?? sourceFile.statements;\n}\n\nexport function transform<T extends Node>(\n  transformer: (node: Node) => VisitResult<Node | undefined>,\n): TransformerFactory<T> {\n  return (context: TransformationContext) => (root: T) => {\n    const visitor = (node: Node): VisitResult<Node | undefined> => {\n      const transformed = transformer(node);\n\n      if (transformed !== node) {\n        return transformed;\n      }\n\n      return ts.visitEachChild(transformed, visitor, context);\n    };\n    return ts.visitEachChild(root, visitor, context);\n  };\n}\n\nexport function traverse<T extends Node>(node: Node, visitor: (node: Node) => T | undefined): T | undefined {\n  function _visitor(n: Node): T | undefined {\n    return visitor(n) ?? ts.forEachChild(n, _visitor);\n  }\n\n  return _visitor(node);\n}\n"],
  "mappings": "AAAA,OAAO;AAAA,OAOA;AAaA,SAAS,SACd,MACA,wBACA,cAC0B;AAC1B,MAAI;AAEJ,MAAI,MAAM,QAAQ,sBAAsB,GAAG;AAEzC,mBAAe;AAAA,EACjB,OAAO;AACL,eAAW;AAAA,EACb;AAEA,MAAI,aAAa,GAAG,iBAAiB,QAAQ,MAAM,GAAG,aAAa,QAAQ,KAAK;AAEhF,MAAI,cAAc;AAChB,KAAC,UAAU,IAAI,GAAG;AAAA,MAChB;AAAA,MACA;AAAA,IACF,EAAE;AAAA,EACJ;AAEA,SAAO,WAAW,WAAW,UAAU,KAAK,WAAW;AACzD;AAEO,SAAS,UACd,aACuB;AACvB,SAAO,CAAC,YAAmC,CAAC,SAAY;AACtD,UAAM,UAAU,CAAC,SAA8C;AAC7D,YAAM,cAAc,YAAY,IAAI;AAEpC,UAAI,gBAAgB,MAAM;AACxB,eAAO;AAAA,MACT;AAEA,aAAO,GAAG,eAAe,aAAa,SAAS,OAAO;AAAA,IACxD;AACA,WAAO,GAAG,eAAe,MAAM,SAAS,OAAO;AAAA,EACjD;AACF;AAEO,SAAS,SAAyB,MAAY,SAAuD;AAC1G,WAAS,SAAS,GAAwB;AACxC,WAAO,QAAQ,CAAC,KAAK,GAAG,aAAa,GAAG,QAAQ;AAAA,EAClD;AAEA,SAAO,SAAS,IAAI;AACtB;",
  "names": []
}
