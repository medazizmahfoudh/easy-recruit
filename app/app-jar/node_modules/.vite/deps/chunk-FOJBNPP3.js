import {
  __publicField
} from "./chunk-547O27LD.js";

// node_modules/@vaadin/hilla-frontend/EndpointErrors.js
var EndpointError = class extends Error {
  /**
   * @param message - the `message` property value
   * @param type - the `type` property value
   * @param detail - the `detail` property value
   */
  constructor(message, type, detail) {
    super(message);
    /**
     * The optional detail object, containing additional information sent
     * from the backend
     */
    __publicField(this, "detail");
    /**
     * The optional name of the exception that was thrown on a backend
     */
    __publicField(this, "type");
    this.type = type;
    this.detail = detail;
  }
};
var EndpointValidationError = class extends EndpointError {
  /**
   * @param message - the `message` property value
   * @param validationErrorData - the `validationErrorData` property value
   * @param type - the `type` property value
   */
  constructor(message, validationErrorData, type) {
    super(message, type, validationErrorData);
    /**
     * An array of the validation errors.
     */
    __publicField(this, "validationErrorData");
    /**
     * An original validation error message.
     */
    __publicField(this, "validationErrorMessage");
    this.validationErrorMessage = message;
    this.detail = null;
    this.validationErrorData = validationErrorData;
  }
};
var EndpointResponseError = class extends EndpointError {
  /**
   * @param message - the `message` property value
   * @param response - the `response` property value
   */
  constructor(message, response) {
    super(message, "EndpointResponseError", response);
    /**
     * The optional response object, containing the HTTP response error
     */
    __publicField(this, "response");
    this.response = response;
  }
  /**
   * Convenience property to get the HTTP code status directly
   */
  get status() {
    return this.response.status;
  }
};
var UnauthorizedResponseError = class extends EndpointResponseError {
  constructor(message, response) {
    super(message, response);
    this.type = "UnauthorizedResponseError";
  }
};
var ForbiddenResponseError = class extends EndpointResponseError {
  constructor(message, response) {
    super(message, response);
    this.type = "ForbiddenResponseError";
  }
};
var ValidationErrorData = class {
  /**
   * @param message - The `message` property value
   * @param parameterName - The `parameterName` property value
   * @param validatorMessage - The `validatorMessage` property value
   */
  constructor(message, parameterName, validatorMessage) {
    /**
     * The validation error message.
     */
    __publicField(this, "message");
    /**
     * The parameter name that caused the validation error.
     */
    __publicField(this, "parameterName");
    /**
     * Validator original message
     */
    __publicField(this, "validatorMessage");
    this.message = message;
    this.parameterName = parameterName;
    this.validatorMessage = validatorMessage;
  }
};

export {
  EndpointError,
  EndpointValidationError,
  EndpointResponseError,
  UnauthorizedResponseError,
  ForbiddenResponseError,
  ValidationErrorData
};
//# sourceMappingURL=chunk-FOJBNPP3.js.map
