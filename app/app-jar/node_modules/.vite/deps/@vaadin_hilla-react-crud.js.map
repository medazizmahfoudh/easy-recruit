{
  "version": 3,
  "sources": ["../../@vaadin/hilla-react-crud/src/autogrid.tsx", "../../@vaadin/hilla-react-crud/src/autogrid-column-context.tsx", "../../@vaadin/hilla-react-crud/src/autogrid-renderers.tsx", "../../@vaadin/hilla-react-crud/src/locale.ts", "../../../scripts/register.js", "../../@vaadin/hilla-react-crud/src/util.tsx", "../../@vaadin/hilla-react-crud/src/header-filter.tsx", "../../@vaadin/hilla-react-crud/src/types/com/vaadin/hilla/crud/filter/PropertyStringFilter/Matcher.ts", "../../@vaadin/hilla-react-crud/src/autogrid-columns.tsx", "../../@vaadin/hilla-react-crud/src/autogrid.obj.css", "../../@vaadin/hilla-react-crud/src/data-provider.ts", "../../@vaadin/hilla-react-crud/src/types/org/springframework/data/domain/Sort/Direction.ts", "../../@vaadin/hilla-react-crud/src/header-sorter.tsx", "../../@vaadin/hilla-react-crud/src/model-info.ts", "../../@vaadin/hilla-react-crud/src/autogrid-feature.ts", "../../@vaadin/hilla-react-crud/src/autoform.tsx", "../../../scripts/register.js", "../../@vaadin/hilla-react-form/src/index.ts", "../../@vaadin/hilla-react-crud/src/autoform-field.tsx", "../../@vaadin/hilla-react-crud/src/autoform.obj.css", "../../@vaadin/hilla-react-crud/src/autoform-feature.ts", "../../@vaadin/hilla-react-crud/src/autocrud.tsx", "../../@vaadin/hilla-react-crud/src/autocrud-dialog.tsx", "../../@vaadin/hilla-react-crud/src/autocrud.obj.css", "../../@vaadin/hilla-react-crud/src/media-query.ts", "../../@vaadin/hilla-react-crud/src/autocrud-feature.ts", "../../../scripts/register.js", "../../@vaadin/hilla-react-crud/src/index.ts"],
  "sourcesContent": ["import type { AbstractModel, DetachedModelConstructor } from '@vaadin/hilla-lit-form';\nimport { Grid, type GridElement, type GridProps } from '@vaadin/react-components/Grid.js';\nimport { GridColumn } from '@vaadin/react-components/GridColumn.js';\nimport { GridColumnGroup } from '@vaadin/react-components/GridColumnGroup.js';\nimport {\n  cloneElement,\n  type ComponentType,\n  type ForwardedRef,\n  forwardRef,\n  type JSX,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { ColumnContext, CustomColumnContext, type SortState } from './autogrid-column-context.js';\nimport { type ColumnOptions, getColumnOptions } from './autogrid-columns.js';\nimport { AutoGridFooterItemCountRenderer, AutoGridRowNumberRenderer, FooterContext } from './autogrid-renderers.js';\nimport css from './autogrid.obj.js';\nimport type { ListService } from './crud';\nimport { createDataProvider, type DataProvider, isCountService, type ItemCounts } from './data-provider.js';\nimport { type HeaderFilterRendererProps, NoHeaderFilter, HeaderFilterWrapper } from './header-filter';\nimport { HeaderSorter } from './header-sorter';\nimport { getDefaultProperties, ModelInfo, type PropertyInfo } from './model-info.js';\nimport type AndFilter from './types/com/vaadin/hilla/crud/filter/AndFilter.js';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';\nimport { isFilterEmpty, registerStylesheet } from './util';\n\nregisterStylesheet(css);\n\nexport interface AutoGridRef<TItem = any> {\n  /**\n   * The underlying vaadin-grid DOM element.\n   */\n  grid: GridElement<TItem> | null;\n\n  /**\n   * Refreshes the grid by reloading the data from the backend.\n   */\n  refresh(): void;\n}\n\ninterface AutoGridOwnProps<TItem> {\n  /**\n   * The service to use for fetching the data. This must be a TypeScript service\n   * that has been generated by Hilla from a backend Java service that\n   * implements the `com.vaadin.hilla.crud.ListService` interface.\n   */\n  service: ListService<TItem>;\n  /**\n   * The entity model to use for the grid, which determines which columns to\n   * show and how to render them. This must be a Typescript model class that has\n   * been generated by Hilla from a backend Java class. The model must match\n   * with the type of the items returned by the service. For example, a\n   * `PersonModel` can be used with a service that returns `Person` instances.\n   *\n   * By default, the grid shows columns for all properties of the model which\n   * have a type that is supported. Use the `visibleColumns` option to customize\n   * which columns to show and in which order.\n   */\n  model: DetachedModelConstructor<AbstractModel<TItem>>;\n  /**\n   * The property to use to detect an item's ID. The item ID is used to keep\n   * the selection state when reloading the grid.\n   *\n   * By default, the component uses the property annotated with\n   * `jakarta.persistence.Id`, or a property named `id`, in that order.\n   * This option can be used to override the default behavior, or define the ID\n   * property in case a class doesn't have a property matching the defaults.\n   */\n  itemIdProperty?: string;\n  /**\n   * Allows to provide a filter that is applied when fetching data from the\n   * service. This can be used for implementing an external filter UI outside\n   * the grid. A custom filter is not compatible with header filters.\n   *\n   * **NOTE:** This is considered an experimental feature and the API may change\n   * in the future.\n   */\n  experimentalFilter?: FilterUnion;\n  /**\n   * Allows to customize which columns to show and in which order. This must be\n   * an array of property names that are defined in the model. Nested properties\n   * can be specified using dot notation, e.g. `address.street`.\n   */\n  visibleColumns?: string[];\n  /**\n   * Allows to customize which columns to hide. This must be an array of property\n   * names that are defined in the model. Nested properties can be specified using\n   * dot notation, e.g. `address.street`.\n   */\n  hiddenColumns?: string[];\n  /**\n   * Disables header filters, which are otherwise enabled by default.\n   */\n  noHeaderFilters?: boolean;\n  /**\n   * Allows to add custom columns to the grid. This must be an array of\n   * `GridColumn` component instances. Custom columns are added after the\n   * auto-generated columns.\n   */\n  customColumns?: JSX.Element[];\n  /**\n   * Allows to customize the props for individual columns. This is an object\n   * where the keys must be property names that are defined in the model, and\n   * the values are props that are accepted by the `GridColumn` component.\n   * Nested properties can be specified using dot notation, e.g.\n   * `address.street`.\n   */\n  columnOptions?: Record<string, ColumnOptions>;\n  /**\n   * When enabled, inserts a column with row numbers at the beginning of the\n   * grid.\n   */\n  rowNumbers?: boolean;\n  /**\n   * When enabled, shows the total count of items in the grid footer.\n   * This requires the provided service to implement the CountService interface,\n   *  otherwise an error will be logged to the console, without any count being\n   *  rendered.\n   */\n  totalCount?: boolean;\n  /**\n   * When enabled, shows the filtered item count in the grid footer.\n   * if totalCount is also enabled, it will show both totalCount and filteredCount.\n   * This requires the provided service to implement the CountService interface,\n   *  otherwise an error will be logged to the console, without any count being\n   *  rendered.\n   */\n  filteredCount?: boolean;\n  /**\n   * Allows to customize the grid footer with a custom renderer component for\n   *  the total count and filtered item count.\n   * This requires the provided service to implement the CountService interface,\n   * See {@link AutoGrid#totalCount} and {@link AutoGrid#filteredCount}.\n   */\n  footerCountRenderer?: ComponentType<ItemCounts>;\n}\n\nexport type AutoGridProps<TItem> = GridProps<TItem> & Readonly<AutoGridOwnProps<TItem>>;\n\ninterface ColumnConfigurationOptions {\n  visibleColumns?: string[];\n  hiddenColumns?: string[];\n  noHeaderFilters?: boolean;\n  customColumns?: JSX.Element[];\n  columnOptions?: Record<string, ColumnOptions>;\n  rowNumbers?: boolean;\n  totalCount?: boolean;\n  filteredCount?: boolean;\n  footerCountRenderer?: ComponentType<ItemCounts>;\n  itemCounts?: ItemCounts;\n}\n\nfunction wrapCustomColumn(\n  column: JSX.Element,\n  setColumnFilter: (filter: FilterUnion, filterKey: string) => void,\n  options: ColumnConfigurationOptions,\n) {\n  const key = column.key ?? 'no-key';\n  const { header, headerRenderer } = column.props;\n  const customOptions = options.columnOptions?.[key];\n  const { header: customHeader, headerRenderer: customHeaderRenderer, headerFilterRenderer } = customOptions ?? {};\n  const columnWithoutHeader = cloneElement(column, {\n    header: null,\n    headerRenderer: HeaderFilterWrapper,\n  });\n  return (\n    <CustomColumnContext.Provider\n      key={key}\n      value={{\n        setColumnFilter,\n        headerFilterRenderer: headerFilterRenderer ?? NoHeaderFilter,\n        filterKey: key,\n      }}\n    >\n      <GridColumnGroup\n        key={key}\n        header={customHeader ?? header}\n        headerRenderer={customHeaderRenderer ?? headerRenderer}\n      >\n        {columnWithoutHeader}\n      </GridColumnGroup>\n    </CustomColumnContext.Provider>\n  );\n}\n\nfunction addCustomColumns(\n  columns: JSX.Element[],\n  options: ColumnConfigurationOptions,\n  setColumnFilter: (filter: FilterUnion, filterKey: string) => void,\n): JSX.Element[] {\n  if (!options.customColumns) {\n    return columns;\n  }\n\n  // When using header filters, wrap custom columns into column groups and\n  // move header text or renderer to group\n  const customColumns = options.noHeaderFilters\n    ? options.customColumns\n    : options.customColumns.map((column) => wrapCustomColumn(column, setColumnFilter, options));\n\n  // When using a custom column order, insert custom columns into auto-generated\n  // ones using their `key`\n  if (options.visibleColumns) {\n    const columnMap = [...columns, ...customColumns].reduce((map, column) => {\n      const { key } = column;\n      if (key) {\n        map.set(key, column);\n      }\n      return map;\n    }, new Map<string, JSX.Element>());\n\n    return options.visibleColumns.map((path) => columnMap.get(path)).filter(Boolean) as JSX.Element[];\n  }\n\n  // Otherwise just append custom columns at the end\n  return [...columns, ...customColumns];\n}\n\nfunction useColumns(\n  properties: PropertyInfo[],\n  setColumnFilter: (filter: FilterUnion, filterKey: string) => void,\n  options: ColumnConfigurationOptions,\n) {\n  const sortableProperties = properties.filter(\n    (propertyInfo) => options.columnOptions?.[propertyInfo.name]?.sortable !== false,\n  );\n  const [sortState, setSortState] = useState<SortState>(\n    sortableProperties.length > 0 ? { [sortableProperties[0].name]: { direction: 'asc' } } : {},\n  );\n  let columns = properties.map((propertyInfo) => {\n    let column;\n    const customColumnOptions = options.columnOptions?.[propertyInfo.name];\n\n    const { headerFilterRenderer, ...columnProps } = getColumnOptions(propertyInfo, customColumnOptions);\n\n    if (!options.noHeaderFilters) {\n      column = (\n        <GridColumnGroup headerRenderer={HeaderSorter}>\n          <GridColumn path={propertyInfo.name} headerRenderer={HeaderFilterWrapper} {...columnProps}></GridColumn>\n        </GridColumnGroup>\n      );\n    } else {\n      column = <GridColumn path={propertyInfo.name} headerRenderer={HeaderSorter} {...columnProps}></GridColumn>;\n    }\n    return (\n      <ColumnContext.Provider\n        key={propertyInfo.name}\n        value={{\n          propertyInfo,\n          setColumnFilter,\n          sortState,\n          setSortState,\n          customColumnOptions,\n          headerFilterRenderer: headerFilterRenderer ?? NoHeaderFilter,\n          filterKey: propertyInfo.name,\n        }}\n      >\n        {column}\n      </ColumnContext.Provider>\n    );\n  });\n\n  columns = addCustomColumns(columns, options, setColumnFilter);\n\n  // When using `hiddenColumns` option, remove columns to hide using their `key`\n  if (options.hiddenColumns) {\n    columns = columns.filter(({ key }) => !(key && options.hiddenColumns?.includes(key)));\n  }\n\n  if (options.rowNumbers) {\n    columns = [\n      <GridColumn key=\"rownumbers\" width=\"4em\" flexGrow={0} renderer={AutoGridRowNumberRenderer}></GridColumn>,\n      ...columns,\n    ];\n  }\n  const { totalCount, filteredCount, itemCounts, footerCountRenderer } = options;\n  if (totalCount ?? filteredCount) {\n    const col = (\n      <FooterContext.Provider\n        key=\"grid-footer\"\n        value={{\n          totalCount,\n          filteredCount,\n          footerCountRenderer,\n          itemCounts,\n        }}\n      >\n        <GridColumnGroup footerRenderer={AutoGridFooterItemCountRenderer}>{columns}</GridColumnGroup>\n      </FooterContext.Provider>\n    );\n    columns = [col];\n  }\n\n  return columns;\n}\n\nfunction AutoGridInner<TItem>(\n  {\n    service,\n    model,\n    itemIdProperty,\n    experimentalFilter,\n    visibleColumns,\n    hiddenColumns,\n    noHeaderFilters,\n    customColumns,\n    columnOptions,\n    rowNumbers,\n    totalCount,\n    filteredCount,\n    footerCountRenderer,\n    ...gridProps\n  }: AutoGridProps<TItem>,\n  ref: ForwardedRef<AutoGridRef<TItem>>,\n): JSX.Element {\n  const [internalFilter, setInternalFilter] = useState<AndFilter>({ '@type': 'and', children: [] });\n  const [itemCounts, setItemCounts] = useState<ItemCounts | undefined>();\n  const gridRef = useRef<GridElement<TItem>>(null);\n  const dataProviderRef = useRef<DataProvider<TItem>>();\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      get grid() {\n        return gridRef.current;\n      },\n      refresh() {\n        dataProviderRef.current?.reset();\n        gridRef.current?.clearCache();\n      },\n    }),\n    [],\n  );\n\n  const setHeaderFilter = (filter: FilterUnion, filterKey: string) => {\n    let changed = false;\n    filter.key = filterKey;\n    const indexOfFilter = filterKey\n      ? internalFilter.children.findIndex((f) => (f as FilterUnion).key === filterKey)\n      : -1;\n    const isEmptyFilter = isFilterEmpty(filter);\n\n    if (indexOfFilter >= 0 && isEmptyFilter) {\n      internalFilter.children.splice(indexOfFilter, 1);\n      changed = true;\n    } else if (!isEmptyFilter) {\n      if (indexOfFilter >= 0) {\n        internalFilter.children[indexOfFilter] = filter;\n        changed = true;\n      } else {\n        internalFilter.children.push(filter);\n        changed = true;\n      }\n    }\n    if (changed) {\n      setInternalFilter({ ...internalFilter });\n    }\n  };\n\n  const modelInfo = useMemo(() => new ModelInfo(model, itemIdProperty), [model]);\n  const properties = visibleColumns ? modelInfo.getProperties(visibleColumns) : getDefaultProperties(modelInfo);\n  const children = useColumns(properties, setHeaderFilter, {\n    visibleColumns,\n    hiddenColumns,\n    noHeaderFilters,\n    customColumns,\n    columnOptions,\n    rowNumbers,\n    totalCount,\n    filteredCount,\n    footerCountRenderer,\n    itemCounts,\n  });\n\n  useEffect(() => {\n    // Remove all filtering if header filters are removed\n    if (noHeaderFilters) {\n      setInternalFilter({ '@type': 'and', children: [] });\n    }\n  }, [noHeaderFilters]);\n\n  useEffect(() => {\n    // Log an error if totalCount or filteredCount is enabled but the service doesn't implement CountService\n    if ((!isCountService(service) && totalCount) ?? filteredCount) {\n      console.error(\n        '\"totalCount\" and \"filteredCount\" props require the provided service to implement the CountService interface.',\n      );\n    }\n    // Sets the data provider, should be done only once\n    const grid = gridRef.current!;\n    // Wait for the sorting headers to be rendered so that the sorting state is correct for the first data provider call\n    const timeoutId = setTimeout(() => {\n      let firstUpdate = true;\n      const dataProvider = createDataProvider(service, {\n        initialFilter: experimentalFilter ?? internalFilter,\n        loadTotalCount: totalCount,\n        afterLoad(newItemCounts: ItemCounts) {\n          setItemCounts(newItemCounts);\n\n          if (firstUpdate) {\n            // Workaround for https://github.com/vaadin/react-components/issues/129\n            firstUpdate = false;\n            setTimeout(() => grid.recalculateColumnWidths(), 0);\n          }\n        },\n      });\n      dataProviderRef.current = dataProvider;\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      gridRef.current!.dataProvider = dataProvider.load.bind(dataProvider);\n    }, 1);\n\n    return () => clearTimeout(timeoutId);\n  }, [model, service]);\n\n  useEffect(() => {\n    // Update the filtering, whenever the filter changes\n    const dataProvider = dataProviderRef.current;\n    const grid = gridRef.current;\n    if (grid && dataProvider) {\n      dataProvider.setFilter(experimentalFilter ?? internalFilter);\n      grid.clearCache();\n    }\n  }, [experimentalFilter, internalFilter]);\n\n  return (\n    <Grid itemIdPath={modelInfo.idProperty?.name} {...gridProps} ref={gridRef}>\n      {children}\n    </Grid>\n  );\n}\n\ntype AutoGrid = <TItem>(\n  props: AutoGridProps<TItem> & { ref?: ForwardedRef<AutoGridRef<TItem>> },\n) => ReturnType<typeof AutoGridInner>;\n\n/**\n * Auto Grid is a component for displaying tabular data based on a Java backend\n * service. It automatically generates columns based on the properties of a\n * Java class and provides features such as lazy-loading, sorting and filtering.\n *\n * Example usage:\n * ```tsx\n * import { AutoGrid } from '@vaadin/hilla-react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoGrid service={PersonService} model={PersonModel} />\n * ```\n */\nexport const AutoGrid: AutoGrid = forwardRef(AutoGridInner) as AutoGrid;\n\nexport type { ColumnOptions, HeaderFilterRendererProps };\n", "import type { GridSorterDirection } from '@vaadin/react-components/GridSorter.js';\nimport { type Dispatch, type SetStateAction, createContext, type ComponentType } from 'react';\nimport type { ColumnOptions } from './autogrid-columns';\nimport type { HeaderFilterRendererProps } from './header-filter';\nimport type { PropertyInfo } from './model-info';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion';\n\nexport interface SorterState {\n  direction: GridSorterDirection;\n}\n\nexport type SortState = Record<string, SorterState | undefined>;\n\nexport type ColumnContext = Readonly<{\n  propertyInfo: PropertyInfo;\n  setColumnFilter(filter: FilterUnion, filterKey: string): void;\n  sortState: SortState;\n  setSortState: Dispatch<SetStateAction<SortState>>;\n  customColumnOptions?: ColumnOptions;\n  headerFilterRenderer: ComponentType<HeaderFilterRendererProps>;\n  filterKey: string;\n}>;\n\nexport const ColumnContext = createContext<ColumnContext | null>(null);\n\nexport type CustomColumnContext = Readonly<{\n  setColumnFilter(filter: FilterUnion, filterKey: string): void;\n  headerFilterRenderer: ComponentType<HeaderFilterRendererProps>;\n  filterKey: string;\n}>;\n\nexport const CustomColumnContext = createContext<CustomColumnContext | null>(null);\n", "import type { GridItemModel } from '@vaadin/react-components/Grid.js';\nimport type { GridColumnElement } from '@vaadin/react-components/GridColumn.js';\nimport { Icon } from '@vaadin/react-components/Icon.js';\nimport { type ComponentType, createContext, type CSSProperties, type JSX, useContext } from 'react';\nimport { ColumnContext } from './autogrid-column-context';\nimport type { ItemCounts } from './data-provider';\nimport { useLocaleFormatter } from './locale.js';\nimport { convertToTitleCase } from './util';\n\n// eslint-disable-next-line\nimport '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';\n\nexport type RendererOptions<TItem> = {\n  item: TItem;\n  model: GridItemModel<TItem>;\n  original: GridColumnElement<TItem>;\n};\n\nfunction getColumnValue<TItem>(context: ColumnContext, item: TItem): any {\n  const path = context.propertyInfo.name;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return path.split('.').reduce<any>((obj, property) => (obj ? obj[property] : undefined), item);\n}\n\nconst fontVariantStyle: CSSProperties = { fontVariantNumeric: 'tabular-nums' };\n\nexport function AutoGridIntegerRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatInteger(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDecimalRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDecimal(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridEnumRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item) || '';\n  return <span>{convertToTitleCase(value)}</span>;\n}\n\nexport function AutoGridBooleanRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  if (value) {\n    return <Icon aria-label=\"false\" icon=\"lumo:checkmark\" />;\n  }\n  return <Icon aria-label=\"true\" style={{ color: 'var(--lumo-secondary-text-color)' }} icon=\"lumo:minus\" />;\n}\n\nexport function AutoGridDateRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDate(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDateTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalDateTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridJsonRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  const jsonString = value ? JSON.stringify(value) : '';\n  const jsonPreview = jsonString.length > 50 ? `${jsonString.substring(0, 50)}...` : jsonString;\n  return <span>{jsonPreview}</span>;\n}\n\nexport function AutoGridRowNumberRenderer<TItem>({ model }: RendererOptions<TItem>): JSX.Element {\n  return <>{model.index + 1}</>;\n}\n\nexport type FooterContextType = {\n  totalCount?: boolean;\n  filteredCount?: boolean;\n  footerCountRenderer?: ComponentType<ItemCounts>;\n  itemCounts?: ItemCounts;\n};\n\nexport const FooterContext = createContext<FooterContextType>(undefined!);\n\nexport function AutoGridFooterItemCountRenderer(): JSX.Element {\n  const footerContext = useContext(FooterContext);\n  const { totalCount, filteredCount, itemCounts, footerCountRenderer: FooterRenderer } = footerContext;\n\n  if (FooterRenderer) {\n    return <FooterRenderer {...itemCounts} />;\n  }\n\n  let filterCountText: string | undefined;\n  if (filteredCount && itemCounts?.filteredCount !== undefined) {\n    filterCountText =\n      totalCount && itemCounts.totalCount !== undefined\n        ? `Showing: ${itemCounts.filteredCount} out of ${itemCounts.totalCount}`\n        : `Showing: ${itemCounts.filteredCount}`;\n  } else if (totalCount && itemCounts?.totalCount !== undefined) {\n    filterCountText = `Total: ${itemCounts.totalCount}`;\n  }\n  if (filterCountText) {\n    return <p>{filterCountText}</p>;\n  }\n  return <></>;\n}\n", "import { DatePickerElement, type DatePickerDate, type DatePickerI18n } from '@vaadin/react-components/DatePicker.js';\nimport { DateTimePickerElement, type DateTimePickerI18n } from '@vaadin/react-components/DateTimePicker.js';\nimport { createContext, useContext, useMemo } from 'react';\n\nexport const LocaleContext = createContext(navigator.language);\n\nfunction getFormatRegex(format: Intl.DateTimeFormat) {\n  const sampleDate = new Date(1234, 5 - 1, 6);\n  const formattedSample = format.format(sampleDate);\n  const pattern = formattedSample\n    .replace('1234', '(?<year>\\\\d+)')\n    .replace('05', '(?<month>\\\\d+)')\n    .replace('5', '(?<month>\\\\d+)')\n    .replace('06', '(?<day>\\\\d+)')\n    .replace('6', '(?<day>\\\\d+)');\n\n  return new RegExp(pattern, 'u');\n}\n\nfunction tryFormatDate(formatter: Intl.DateTimeFormat, value?: string): string {\n  try {\n    return value ? formatter.format(new Date(value)) : '';\n  } catch (e) {\n    return '';\n  }\n}\n\nexport class LocaleFormatter {\n  readonly #date: Intl.DateTimeFormat;\n  readonly #localTime: Intl.DateTimeFormat;\n  readonly #localDateTime: Intl.DateTimeFormat;\n  readonly #integer: Intl.NumberFormat;\n  readonly #decimal: Intl.NumberFormat;\n  readonly #parsePattern: RegExp;\n\n  constructor(locale?: string) {\n    this.#date = new Intl.DateTimeFormat(locale);\n\n    this.#localTime = new Intl.DateTimeFormat(locale, {\n      hour: 'numeric',\n      minute: 'numeric',\n    });\n\n    this.#localDateTime = new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n    });\n\n    this.#integer = new Intl.NumberFormat(locale, {\n      maximumFractionDigits: 0,\n    });\n\n    this.#decimal = new Intl.NumberFormat(locale, {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    });\n\n    this.#parsePattern = getFormatRegex(this.#date);\n  }\n\n  formatDate(value?: string): string;\n  formatDate(value: DatePickerDate): string;\n  formatDate(value?: DatePickerDate | string): string {\n    if (typeof value === 'object') {\n      const { year, month, day } = value;\n      const date = new Date();\n      date.setFullYear(year, month, day);\n      return this.#date.format(date);\n    }\n\n    return tryFormatDate(this.#date, value);\n  }\n\n  formatLocalTime(value?: string): string {\n    return tryFormatDate(this.#localTime, `2000-01-01T${value}`);\n  }\n\n  formatLocalDateTime(value?: string): string {\n    return tryFormatDate(this.#localDateTime, value);\n  }\n\n  formatInteger(value?: number): string {\n    return value && Number.isFinite(value) ? this.#integer.format(value) : '';\n  }\n\n  formatDecimal(value?: number): string {\n    return value && Number.isFinite(value) ? this.#decimal.format(value) : '';\n  }\n\n  parse(dateString: string): DatePickerDate | undefined {\n    const match = this.#parsePattern.exec(dateString);\n    const year = Number(match?.groups?.year);\n    const month = Number(match?.groups?.month) - 1;\n    const day = Number(match?.groups?.day);\n\n    // Verify that the parsed date is valid\n    const dateInstance = new Date();\n    dateInstance.setFullYear(year, month, day);\n\n    if (dateInstance.getFullYear() !== year || dateInstance.getMonth() !== month || dateInstance.getDate() !== day) {\n      return undefined;\n    }\n\n    return { year, month, day };\n  }\n}\n\nexport function useLocaleFormatter(): LocaleFormatter {\n  const locale = useContext(LocaleContext);\n  return useMemo(() => new LocaleFormatter(locale), [locale]);\n}\n\nconst defaultDatePickerI18n = new DatePickerElement().i18n;\n\nexport function useDatePickerI18n(): DatePickerI18n {\n  const formatter = useLocaleFormatter();\n\n  return useMemo(\n    () => ({\n      ...defaultDatePickerI18n,\n      formatDate(value) {\n        return formatter.formatDate(value);\n      },\n      parseDate(value) {\n        return formatter.parse(value);\n      },\n    }),\n    [formatter],\n  );\n}\n\nconst defaultDateTimePickerI18n = new DateTimePickerElement().i18n;\n\nexport function useDateTimePickerI18n(): DateTimePickerI18n {\n  const datePickerI18n = useDatePickerI18n();\n\n  return useMemo(\n    () => ({\n      ...defaultDateTimePickerI18n,\n      ...datePickerI18n,\n    }),\n    [datePickerI18n],\n  );\n}\n", "export function __REGISTER__(feature, vaadinObj = (window.Vaadin ??= {})) {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `${__NAME__}/${feature}` : __NAME__,\n    version: __VERSION__,\n  });\n}\n", "import React, { type CSSProperties, forwardRef } from 'react';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion';\n\nexport type ComponentStyleProps = Readonly<{\n  id?: string;\n  style?: CSSProperties;\n  className?: string;\n}>;\n\nexport function convertToTitleCase(inputString: string): string {\n  // Convert underscores to spaces\n  const stringWithSpaces = inputString.replace(/_/gu, ' ');\n\n  // Convert to title case\n  const words = stringWithSpaces.split(' ');\n  const titleCaseWords = words.map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase());\n\n  // Join the title case words with spaces\n  return titleCaseWords.join(' ');\n}\n\nexport function registerStylesheet(stylesheet: CSSStyleSheet): void {\n  const css = Array.from(stylesheet.cssRules)\n    .map((rule) => rule.cssText)\n    .join('\\n');\n\n  const styleTag = document.createElement('style');\n  styleTag.textContent = css;\n  document.head.prepend(styleTag);\n}\n\nconst registeredFeatures = new Set<string>();\nfunction useFeatureRegistration(feature: string): void {\n  if (registeredFeatures.has(feature)) {\n    return;\n  }\n\n  registeredFeatures.add(feature);\n  // @ts-expect-error: esbuild injection\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  __REGISTER__(feature);\n}\n\nexport function featureRegistration<C extends (...args: any[]) => any>(Component: C, feature: string): C {\n  return forwardRef<unknown, React.JSX.LibraryManagedAttributes<C, NonNullable<unknown>>>((props, ref) => {\n    useFeatureRegistration(feature);\n    return <Component {...props} ref={ref} />;\n  }) as unknown as C;\n}\n\nexport function isFilterEmpty(filter: FilterUnion): boolean {\n  if (filter['@type'] === 'and' || filter['@type'] === 'or') {\n    if (filter.children.length === 0) {\n      return true;\n    }\n    return filter.children.every((child) => isFilterEmpty(child as FilterUnion));\n  }\n  if ('filterValue' in filter) {\n    return filter.filterValue === '';\n  }\n  throw new Error(`Unknown filter type: ${'@type' in filter ? filter['@type'] : JSON.stringify(filter)} `);\n}\n", "import { _enum, type EnumModel } from '@vaadin/hilla-lit-form';\nimport { DatePicker } from '@vaadin/react-components/DatePicker.js';\nimport type { GridColumnProps } from '@vaadin/react-components/GridColumn.js';\nimport { Item } from '@vaadin/react-components/Item.js';\nimport { ListBox } from '@vaadin/react-components/ListBox.js';\nimport { NumberField } from '@vaadin/react-components/NumberField.js';\nimport { Select, type SelectElement } from '@vaadin/react-components/Select.js';\nimport { TextField, type TextFieldElement } from '@vaadin/react-components/TextField.js';\nimport { TimePicker } from '@vaadin/react-components/TimePicker.js';\nimport {\n  type ComponentType,\n  type JSX,\n  type ReactElement,\n  type RefObject,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { ColumnContext, CustomColumnContext } from './autogrid-column-context.js';\nimport { useDatePickerI18n } from './locale.js';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion';\nimport type PropertyStringFilter from './types/com/vaadin/hilla/crud/filter/PropertyStringFilter';\nimport Matcher from './types/com/vaadin/hilla/crud/filter/PropertyStringFilter/Matcher.js';\nimport { convertToTitleCase } from './util';\n\ntype ExtractComponentTypeProps<T extends ComponentType<any>> = T extends ComponentType<infer U> ? U : never;\n\nexport type HeaderRendererProps = ExtractComponentTypeProps<\n  NonNullable<Required<GridColumnProps<unknown>>['headerRenderer']>\n>;\n\nexport type HeaderFilterRendererProps = HeaderRendererProps & {\n  /**\n   * Allows to set custom filters for the column.\n   * This is used by the header filter components.\n   * @param filter - The filter to set in the filter list.\n   */\n  setFilter(filter: FilterUnion): void;\n};\n\nexport type HeaderFilterProps = Readonly<{\n  /**\n   * If true, the column can be sorted. This is useful to disable sorting for\n   * properties that are not sortable in the backend, or that require excessive processing.\n   */\n  sortable?: boolean;\n  /**\n   * If true, the column can be filtered. This is useful to disable filtering for\n   * properties that are not sortable in the backend, or that require excessive processing.\n   */\n  filterable?: boolean;\n  /**\n   * Placeholder text for the filter input.\n   * Only applies to string, number and date/time value filters.\n   */\n  filterPlaceholder?: string;\n  /**\n   * Debounce time for the filter input in milliseconds.\n   * Only applies to string value filters and number value filters.\n   */\n  filterDebounceTime?: number;\n  /**\n   * Minimum length for the filter input.\n   * Only applies to string value filters.\n   */\n  filterMinLength?: number;\n\n  /**\n   * Custom renderer for the filter in the header.\n   */\n  headerFilterRenderer?: ComponentType<HeaderFilterRendererProps>;\n}>;\n\nfunction useFilterState(initialMatcher: Matcher) {\n  const context = useContext(ColumnContext)!;\n  const [matcher, setMatcher] = useState(initialMatcher);\n  const [filterValue, setFilterValue] = useState('');\n\n  function updateFilter(newMatcher: Matcher, newFilterValue: string) {\n    setFilterValue(newFilterValue);\n    setMatcher(newMatcher);\n\n    const filter: PropertyStringFilter = {\n      propertyId: context.propertyInfo.name,\n      filterValue: newFilterValue,\n      matcher: newMatcher,\n      '@type': 'propertyString',\n    };\n    context.setColumnFilter(filter, context.filterKey);\n  }\n\n  return { matcher, filterValue, updateFilter };\n}\n\n// Workaround for https://github.com/vaadin/react-components/issues/148\nfunction useSelectInitWorkaround(selectRef: RefObject<SelectElement>) {\n  useEffect(() => {\n    setTimeout(() => {\n      if (selectRef.current) {\n        selectRef.current.requestContentUpdate();\n      }\n    }, 1);\n  }, []);\n}\n\n// extracted component (and type) to avoid code duplication\ntype ComparationSelectionProps = Readonly<{\n  value: Matcher;\n  onMatcherChanged(matcher: Matcher): void;\n  isDateTimeType?: boolean;\n}>;\n\nfunction ComparationSelection({ onMatcherChanged, value, isDateTimeType }: ComparationSelectionProps): ReactElement {\n  const select = useRef<SelectElement>(null);\n\n  useSelectInitWorkaround(select);\n\n  return (\n    <Select\n      theme=\"small\"\n      className=\"auto-grid-comparation-selection\"\n      ref={select}\n      value={value}\n      onValueChanged={({ detail }) => {\n        onMatcherChanged(detail.value as Matcher);\n      }}\n      renderer={() => (\n        <ListBox>\n          <Item value={Matcher.GREATER_THAN} {...{ label: '>' }}>\n            {isDateTimeType ? '> After' : '> Greater than'}\n          </Item>\n          <Item value={Matcher.LESS_THAN} {...{ label: '<' }}>\n            {isDateTimeType ? '< Before' : '< Less than'}\n          </Item>\n          <Item value={Matcher.EQUALS} {...{ label: '=' }}>\n            = Equals\n          </Item>\n        </ListBox>\n      )}\n    ></Select>\n  );\n}\n\nexport function StringHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const { filterPlaceholder, filterDebounceTime, filterMinLength } = context.customColumnOptions ?? {};\n  const { updateFilter } = useFilterState(Matcher.CONTAINS);\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (filterMinLength && inputValue && inputValue.length < filterMinLength) {\n      updateFilter(Matcher.CONTAINS, '');\n      return () => {};\n    }\n\n    const delayInputTimeoutId = setTimeout(() => {\n      updateFilter(Matcher.CONTAINS, inputValue);\n    }, filterDebounceTime ?? 200);\n    return () => clearTimeout(delayInputTimeoutId);\n  }, [inputValue]);\n\n  return (\n    <div className=\"auto-grid-string-filter\">\n      <TextField\n        theme=\"small\"\n        placeholder={filterPlaceholder ?? 'Filter...'}\n        onInput={(e: any) => {\n          const fieldValue = ((e as InputEvent).target as TextFieldElement).value;\n          setInputValue(fieldValue);\n        }}\n      ></TextField>\n    </div>\n  );\n}\n\nexport function NumberHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const { filterPlaceholder, filterDebounceTime } = context.customColumnOptions ?? {};\n  const [inputValue, setInputValue] = useState('');\n  const { matcher, filterValue, updateFilter } = useFilterState(Matcher.GREATER_THAN);\n  const select = useRef<SelectElement>(null);\n\n  useSelectInitWorkaround(select);\n\n  useEffect(() => {\n    const delayInputTimeoutId = setTimeout(() => {\n      updateFilter(matcher, inputValue);\n    }, filterDebounceTime ?? 200);\n    return () => clearTimeout(delayInputTimeoutId);\n  }, [inputValue]);\n\n  return (\n    <div className=\"auto-grid-number-filter\">\n      <ComparationSelection value={matcher} onMatcherChanged={(m) => updateFilter(m, filterValue)} />\n      <NumberField\n        theme=\"small\"\n        placeholder={filterPlaceholder ?? 'Filter...'}\n        onInput={(e) => {\n          const fieldValue = ((e as InputEvent).target as TextFieldElement).value;\n          setInputValue(fieldValue);\n        }}\n      />\n    </div>\n  );\n}\n\nexport function EnumHeaderFilter(): ReactElement {\n  const { filterValue, updateFilter } = useFilterState(Matcher.EQUALS);\n  const context = useContext(ColumnContext)!;\n  const model = context.propertyInfo.model as EnumModel;\n  const options = [\n    {\n      value: '',\n      label: '',\n    },\n    ...Object.keys(model[_enum]).map((value) => ({\n      label: convertToTitleCase(value),\n      value,\n    })),\n  ];\n  return (\n    <div className=\"auto-grid-enum-filter\">\n      <Select\n        theme=\"small\"\n        items={options}\n        value={filterValue}\n        onValueChanged={(e) => {\n          const newFilterValue = e.detail.value;\n          updateFilter(Matcher.EQUALS, newFilterValue);\n        }}\n      />\n    </div>\n  );\n}\n\nexport function BooleanHeaderFilter(): ReactElement {\n  const { filterValue, updateFilter } = useFilterState(Matcher.EQUALS);\n  const select = useRef<SelectElement>(null);\n\n  useSelectInitWorkaround(select);\n\n  return (\n    <div className=\"auto-grid-boolean-filter\">\n      <Select\n        theme=\"small\"\n        ref={select}\n        onValueChanged={(e) => {\n          const newFilterValue = e.detail.value;\n          updateFilter(Matcher.EQUALS, newFilterValue);\n        }}\n        renderer={() => (\n          <ListBox>\n            <Item value={''} {...{ label: '' }}></Item>\n            <Item value={'True'} {...{ label: 'Yes' }}>\n              Yes\n            </Item>\n            <Item value={'False'} {...{ label: 'No' }}>\n              No\n            </Item>\n          </ListBox>\n        )}\n        value={filterValue}\n      ></Select>\n    </div>\n  );\n}\n\nexport function DateHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const i18n = useDatePickerI18n();\n  const { matcher, filterValue, updateFilter } = useFilterState(Matcher.GREATER_THAN);\n  const [invalid, setInvalid] = useState(false);\n\n  return (\n    <div className=\"auto-grid-date-filter\">\n      <ComparationSelection\n        value={matcher}\n        onMatcherChanged={(m) => updateFilter(m, filterValue)}\n        isDateTimeType={true}\n      />\n      <DatePicker\n        theme=\"small\"\n        value={filterValue}\n        placeholder={context.customColumnOptions?.filterPlaceholder ?? 'Filter...'}\n        i18n={i18n}\n        onInvalidChanged={({ detail: { value } }) => {\n          setInvalid(value);\n        }}\n        onValueChanged={({ detail: { value } }) => {\n          if (!(invalid || value === filterValue)) {\n            updateFilter(matcher, value);\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport function TimeHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const { matcher, filterValue, updateFilter } = useFilterState(Matcher.GREATER_THAN);\n  const [invalid, setInvalid] = useState(false);\n\n  return (\n    <div className=\"auto-grid-time-filter\">\n      <ComparationSelection\n        value={matcher}\n        onMatcherChanged={(m) => updateFilter(m, filterValue)}\n        isDateTimeType={true}\n      />\n      <TimePicker\n        theme=\"small\"\n        value={filterValue}\n        placeholder={context.customColumnOptions?.filterPlaceholder ?? 'Filter...'}\n        onInvalidChanged={({ detail: { value } }) => {\n          setInvalid(value);\n        }}\n        onValueChanged={({ detail: { value } }) => {\n          if (!(invalid || value === filterValue)) {\n            updateFilter(matcher, value);\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport function NoHeaderFilter(): ReactElement {\n  return <></>;\n}\n\nexport function HeaderFilterWrapper({ original }: HeaderRendererProps): JSX.Element | null {\n  const context = useContext(ColumnContext);\n  const customContext = useContext(CustomColumnContext);\n  const { setColumnFilter, headerFilterRenderer: HeaderFilterRenderer, filterKey } = (context ?? customContext)!;\n\n  function setFilter(filter: FilterUnion) {\n    setColumnFilter(filter, filterKey);\n  }\n\n  return <HeaderFilterRenderer original={original} setFilter={setFilter} />;\n}\n", "enum Matcher {\n    EQUALS = \"EQUALS\",\n    CONTAINS = \"CONTAINS\",\n    LESS_THAN = \"LESS_THAN\",\n    GREATER_THAN = \"GREATER_THAN\"\n}\nexport default Matcher;\n", "import type { GridColumnProps } from '@vaadin/react-components/GridColumn.js';\nimport {\n  AutoGridBooleanRenderer,\n  AutoGridDateRenderer,\n  AutoGridDateTimeRenderer,\n  AutoGridDecimalRenderer,\n  AutoGridEnumRenderer,\n  AutoGridIntegerRenderer,\n  AutoGridJsonRenderer,\n  AutoGridTimeRenderer,\n} from './autogrid-renderers';\nimport {\n  BooleanHeaderFilter,\n  DateHeaderFilter,\n  EnumHeaderFilter,\n  type HeaderFilterProps,\n  NoHeaderFilter,\n  NumberHeaderFilter,\n  StringHeaderFilter,\n  TimeHeaderFilter,\n} from './header-filter';\nimport type { PropertyInfo } from './model-info';\n\nexport type ColumnOptions = HeaderFilterProps & Omit<GridColumnProps<any>, 'dangerouslySetInnerHTML'>;\n\n// eslint-disable-next-line consistent-return\nfunction getTypeColumnOptions(propertyInfo: PropertyInfo, customColumnOptions?: ColumnOptions): ColumnOptions {\n  // eslint-disable-next-line default-case\n  switch (propertyInfo.type) {\n    case 'integer':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridIntegerRenderer,\n        headerFilterRenderer: NumberHeaderFilter,\n      };\n    case 'decimal':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridDecimalRenderer,\n        headerFilterRenderer: NumberHeaderFilter,\n      };\n    case 'boolean':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridBooleanRenderer,\n        headerFilterRenderer: BooleanHeaderFilter,\n      };\n    case 'date':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridDateRenderer,\n        headerFilterRenderer: DateHeaderFilter,\n      };\n    case 'time':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridTimeRenderer,\n        headerFilterRenderer: TimeHeaderFilter,\n      };\n    case 'datetime':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridDateTimeRenderer,\n        headerFilterRenderer: DateHeaderFilter,\n      };\n    case 'enum':\n      return {\n        autoWidth: true,\n        renderer: AutoGridEnumRenderer,\n        headerFilterRenderer: EnumHeaderFilter,\n      };\n    case 'string':\n      return {\n        autoWidth: true,\n        headerFilterRenderer: StringHeaderFilter,\n      };\n    case 'object':\n      return {\n        autoWidth: true,\n        renderer:\n          customColumnOptions?.path !== undefined && customColumnOptions.renderer == null ? null : AutoGridJsonRenderer,\n        headerFilterRenderer: NoHeaderFilter,\n      };\n    default:\n      return {\n        autoWidth: true,\n        headerFilterRenderer: NoHeaderFilter,\n      };\n  }\n}\n\nexport function getColumnOptions(\n  propertyInfo: PropertyInfo,\n  customColumnOptions: ColumnOptions | undefined,\n): ColumnOptions {\n  const typeColumnOptions = getTypeColumnOptions(propertyInfo, customColumnOptions);\n  const headerFilterRenderer =\n    customColumnOptions?.filterable === false\n      ? NoHeaderFilter\n      : (typeColumnOptions.headerFilterRenderer ?? NoHeaderFilter);\n  // TODO: Remove eslint-disable when all TypeScript version issues are resolved\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  return customColumnOptions\n    ? { ...typeColumnOptions, headerFilterRenderer, ...customColumnOptions }\n    : typeColumnOptions;\n}\n", "const css = new CSSStyleSheet();css.replaceSync(`.auto-grid-comparation-selection{--vaadin-field-default-width:2em}.auto-grid-comparation-selection>vaadin-select-value-button{--_lumo-text-field-overflow-mask-image:none!important;color:var(--lumo-secondary-text-color)}.auto-grid-comparation-selection::part(toggle-button){display:none}.auto-grid-string-filter{display:flex}.auto-grid-string-filter vaadin-text-field{flex:1 1 0;width:100px}.auto-grid-boolean-filter{display:flex}.auto-grid-boolean-filter vaadin-select{flex:1 1 0;width:80px}.auto-grid-boolean-filter vaadin-select-item{font-size:14px}.auto-grid-number-filter{display:flex}.auto-grid-number-filter vaadin-number-field{flex:1 1 0;width:100px}.auto-grid-number-filter vaadin-select::part(input-field){border-bottom-right-radius:0;border-top-right-radius:0}.auto-grid-number-filter vaadin-number-field::part(input-field){border-bottom-left-radius:0;border-top-left-radius:0}.auto-grid-enum-filter{display:flex}.auto-grid-enum-filter vaadin-select{flex:1 1 0;width:120px}.auto-grid-enum-filter vaadin-select-item{font-size:14px}.auto-grid-date-filter{display:flex}.auto-grid-date-filter vaadin-date-picker{flex:1 1 0;width:120px}.auto-grid-date-filter vaadin-select::part(input-field){border-bottom-right-radius:0;border-top-right-radius:0}.auto-grid-date-filter vaadin-date-picker::part(input-field){border-bottom-left-radius:0;border-top-left-radius:0}.auto-grid-time-filter{display:flex}.auto-grid-time-filter vaadin-time-picker{flex:1 1 0;width:100px}.auto-grid-time-filter vaadin-select::part(input-field){border-bottom-right-radius:0;border-top-right-radius:0}.auto-grid-time-filter vaadin-time-picker::part(input-field){border-bottom-left-radius:0;border-top-left-radius:0}`);export { css as default };", "import type { GridDataProviderCallback, GridDataProviderParams } from '@vaadin/react-components/Grid';\nimport type { GridDataProvider } from '@vaadin/react-components/Grid';\nimport { useMemo, useState } from 'react';\nimport type { CountService, ListService } from './crud';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion';\nimport type Sort from './types/com/vaadin/hilla/mappedtypes/Sort';\nimport Direction from './types/org/springframework/data/domain/Sort/Direction';\n\ntype MaybeCountService<TItem> = Partial<CountService<TItem>>;\ntype ListAndMaybeCountService<TItem> = ListService<TItem> & MaybeCountService<TItem>;\ntype ListAndCountService<TItem> = CountService<TItem> & ListService<TItem>;\n\ntype PageRequest = {\n  pageNumber: number;\n  pageSize: number;\n  sort: Sort;\n};\n\ntype DataPage<TItem> = {\n  items: TItem[];\n  pageRequest: PageRequest;\n};\n\nexport type ItemCounts = {\n  totalCount?: number;\n  filteredCount?: number;\n};\n\ntype AfterLoadCallback = (result: ItemCounts) => void;\n\ntype DataProviderOptions = {\n  initialFilter?: FilterUnion;\n  loadTotalCount?: boolean;\n  afterLoad?: AfterLoadCallback;\n};\n\nfunction createSort<TItem>(params: GridDataProviderParams<TItem>): Sort {\n  return {\n    orders: params.sortOrders\n      .filter((order) => order.direction != null)\n      .map((order) => ({\n        property: order.path,\n        direction: order.direction === 'asc' ? Direction.ASC : Direction.DESC,\n        ignoreCase: false,\n      })),\n  };\n}\n\nexport function isCountService<TItem>(service: ListAndMaybeCountService<TItem>): service is ListAndCountService<TItem> {\n  return !!service.count;\n}\n\nexport abstract class DataProvider<TItem> {\n  protected readonly service: ListAndMaybeCountService<TItem>;\n  protected readonly loadTotalCount?: boolean;\n  protected readonly afterLoadCallback?: AfterLoadCallback;\n\n  protected filter: FilterUnion | undefined;\n  protected totalCount: number | undefined;\n  protected filteredCount: number | undefined;\n\n  constructor(service: ListAndMaybeCountService<TItem>, options: DataProviderOptions = {}) {\n    this.service = service;\n    this.filter = options.initialFilter;\n    this.loadTotalCount = options.loadTotalCount;\n    this.afterLoadCallback = options.afterLoad;\n\n    this.load = this.load.bind(this);\n  }\n\n  reset(): void {\n    this.totalCount = undefined;\n    this.filteredCount = undefined;\n  }\n\n  setFilter(filter: FilterUnion | undefined): void {\n    this.reset();\n    this.filter = filter;\n  }\n\n  async load(params: GridDataProviderParams<TItem>, callback: GridDataProviderCallback<TItem>): Promise<void> {\n    // Fetch page and filtered count\n    const page = await this.fetchPage(params);\n    this.filteredCount = await this.fetchFilteredCount(page);\n    // Only fetch total count if it's specific in options\n    if (this.loadTotalCount) {\n      this.totalCount = await this.fetchTotalCount(page);\n    }\n\n    // Pass results to grid\n    callback(page.items, this.filteredCount);\n\n    // Pass results to callback\n    if (this.afterLoadCallback) {\n      this.afterLoadCallback({\n        totalCount: this.totalCount,\n        filteredCount: this.filteredCount,\n      });\n    }\n  }\n\n  protected async fetchPage(params: GridDataProviderParams<TItem>): Promise<DataPage<TItem>> {\n    const sort = createSort(params);\n    const pageNumber = params.page;\n    const { pageSize } = params;\n    const pageRequest = {\n      pageNumber,\n      pageSize,\n      sort,\n    };\n    const items = await this.service.list(pageRequest, this.filter);\n\n    return { items, pageRequest };\n  }\n\n  protected abstract fetchTotalCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n\n  protected abstract fetchFilteredCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n}\n\nexport class InfiniteDataProvider<TItem> extends DataProvider<TItem> {\n  // cannot be static, otherwise it does not implement superclass\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  protected fetchTotalCount(): undefined {\n    return undefined;\n  }\n\n  protected fetchFilteredCount(page: DataPage<TItem>): number | undefined {\n    const { items, pageRequest } = page;\n    const { pageNumber, pageSize } = pageRequest;\n    let infiniteScrollingSize;\n\n    if (items.length === pageSize) {\n      infiniteScrollingSize = (pageNumber + 1) * pageSize + 1;\n      if (this.filteredCount !== undefined && infiniteScrollingSize < this.filteredCount) {\n        // Only allow size to grow here to avoid shrinking the size when scrolled down and sorting\n        infiniteScrollingSize = this.filteredCount;\n      }\n    } else {\n      infiniteScrollingSize = pageNumber * pageSize + items.length;\n    }\n\n    return infiniteScrollingSize;\n  }\n}\n\nexport class FixedSizeDataProvider<TItem> extends DataProvider<TItem> {\n  declare service: ListAndCountService<TItem>;\n\n  constructor(service: ListAndMaybeCountService<TItem>, options: DataProviderOptions = {}) {\n    if (!isCountService(service)) {\n      throw new Error('The provided service does not implement the CountService interface.');\n    }\n    super(service, options);\n  }\n\n  protected async fetchTotalCount(): Promise<number | undefined> {\n    // Use cached count if it's already known\n    if (this.totalCount !== undefined) {\n      return this.totalCount;\n    }\n    return this.service.count(undefined);\n  }\n\n  protected async fetchFilteredCount(): Promise<number | undefined> {\n    // Use cached count if it's already known\n    if (this.filteredCount !== undefined) {\n      return this.filteredCount;\n    }\n    return this.service.count(this.filter);\n  }\n}\n\nexport function createDataProvider<TItem>(\n  service: ListAndMaybeCountService<TItem>,\n  options: DataProviderOptions = {},\n): DataProvider<TItem> {\n  if (isCountService(service)) {\n    return new FixedSizeDataProvider(service, options);\n  }\n  return new InfiniteDataProvider(service, options);\n}\n\ntype UseDataProviderResult<TItem> = Readonly<{\n  dataProvider: GridDataProvider<TItem>;\n  refresh(): void;\n}>;\n\nexport function useDataProvider<TItem>(\n  service: ListAndMaybeCountService<TItem>,\n  filter?: FilterUnion,\n): UseDataProviderResult<TItem> {\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const dataProvider = useMemo(() => createDataProvider(service, { initialFilter: filter }), [service]);\n\n  // Update filter in data provider\n  dataProvider.setFilter(filter);\n\n  // Create a new data provider function reference when the filter changes or the refresh counter is incremented.\n  // This effectively forces the grid to reload\n  const dataProviderFn = useMemo(() => dataProvider.load.bind(dataProvider), [dataProvider, filter, refreshCounter]);\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    dataProvider: dataProviderFn,\n    refresh: () => {\n      dataProvider.reset();\n      setRefreshCounter(refreshCounter + 1);\n    },\n  };\n}\n", "enum Direction {\n    ASC = \"ASC\",\n    DESC = \"DESC\"\n}\nexport default Direction;\n", "import { GridSorter } from '@vaadin/react-components/GridSorter.js';\nimport { useContext, type ReactElement } from 'react';\nimport { ColumnContext } from './autogrid-column-context.js';\n\nexport function HeaderSorter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const sorterState = context.sortState[context.propertyInfo.name];\n  const direction = sorterState?.direction ?? null;\n  const headerLabel = context.customColumnOptions?.header ?? context.propertyInfo.humanReadableName;\n\n  return context.customColumnOptions?.sortable === false ? (\n    <>{headerLabel}</>\n  ) : (\n    <GridSorter\n      path={context.propertyInfo.name}\n      direction={direction}\n      onDirectionChanged={(e) => {\n        context.setSortState((prevState) => {\n          const newSorterState = e.detail.value ? { direction: e.detail.value } : undefined;\n          return { ...prevState, [context.propertyInfo.name]: newSorterState };\n        });\n      }}\n    >\n      {headerLabel}\n    </GridSorter>\n  );\n}\n", "import {\n  BooleanModel,\n  NumberModel,\n  StringModel,\n  _meta,\n  createDetachedModel,\n  type AbstractModel,\n  type DetachedModelConstructor,\n  type ModelMetadata,\n  EnumModel,\n  ObjectModel,\n} from '@vaadin/hilla-lit-form';\n\nexport type PropertyType =\n  | 'boolean'\n  | 'date'\n  | 'datetime'\n  | 'decimal'\n  | 'enum'\n  | 'integer'\n  | 'object'\n  | 'string'\n  | 'time'\n  | undefined;\n\nconst javaTypeMap: Record<string, PropertyType> = {\n  byte: 'integer',\n  'java.lang.Byte': 'integer',\n  short: 'integer',\n  'java.lang.Short': 'integer',\n  int: 'integer',\n  'java.lang.Integer': 'integer',\n  long: 'integer',\n  'java.lang.Long': 'integer',\n  float: 'decimal',\n  'java.lang.Float': 'decimal',\n  double: 'decimal',\n  'java.lang.Double': 'decimal',\n  'java.time.LocalDate': 'date',\n  'java.time.LocalTime': 'time',\n  'java.time.OffsetTime': 'time',\n  'java.time.LocalDateTime': 'datetime',\n  'java.time.OffsetDateTime': 'datetime',\n  'java.time.ZonedDateTime': 'datetime',\n  'java.util.Date': 'datetime',\n  'java.sql.Date': 'datetime',\n};\n\nfunction determinePropertyType(model: AbstractModel): PropertyType {\n  // Try detecting by Java type\n  const { javaType } = model[_meta];\n  const propertyType = javaType ? javaTypeMap[javaType] : undefined;\n  if (propertyType) {\n    return propertyType;\n  }\n\n  // Otherwise detect by model instance\n  if (model instanceof StringModel) {\n    return 'string';\n  } else if (model instanceof NumberModel) {\n    return 'decimal';\n  } else if (model instanceof BooleanModel) {\n    return 'boolean';\n  } else if (model instanceof EnumModel) {\n    return 'enum';\n  } else if (model instanceof ObjectModel) {\n    return 'object';\n  }\n\n  return undefined;\n}\n\nexport interface PropertyInfo {\n  name: string;\n  humanReadableName: string;\n  type: PropertyType;\n  meta: ModelMetadata;\n  model: AbstractModel;\n}\n\nexport function hasAnnotation(meta: ModelMetadata, annotationName: string): boolean {\n  return meta.annotations?.some((annotation) => annotation.name === annotationName) ?? false;\n}\n\n// This is from vaadin-grid-column.js, should be used from there maybe. At least we must be 100% sure to match grid and fields\nexport function _generateHeader(path: string): string {\n  return path\n    .substring(path.lastIndexOf('.') + 1)\n    .replace(/([A-Z])/gu, '-$1')\n    .toLowerCase()\n    .replace(/-/gu, ' ')\n    .replace(/^./u, (match) => match.toUpperCase());\n}\n\nconst getPropertyNames = (model: DetachedModelConstructor<AbstractModel>): string[] => {\n  const propertyNames: string[] = [];\n\n  for (let proto = model; proto !== ObjectModel; proto = Object.getPrototypeOf(proto)) {\n    // parent properties are added at the beginning\n    propertyNames.unshift(...Object.keys(Object.getOwnPropertyDescriptors(proto.prototype)).filter((p) => p !== 'new'));\n  }\n\n  return propertyNames;\n};\n\nexport class ModelInfo {\n  private readonly modelInstance: AbstractModel;\n\n  readonly idProperty?: PropertyInfo;\n\n  constructor(model: DetachedModelConstructor<AbstractModel>, idPropertyName?: string) {\n    this.modelInstance = createDetachedModel(model);\n\n    // Try to find id property\n    this.idProperty = ModelInfo.resolveIdProperty(this, idPropertyName);\n  }\n\n  private static resolveIdProperty(modelInfo: ModelInfo, idPropertyName?: string): PropertyInfo | undefined {\n    // Return explicit property if defined\n    if (idPropertyName) {\n      return modelInfo.getProperty(idPropertyName);\n    }\n\n    // Otherwise check defaults\n    const rootProperties = modelInfo.getRootProperties();\n    // Check for @Id annotation\n    let idProperty = rootProperties.find((propertyInfo) => hasAnnotation(propertyInfo.meta, 'jakarta.persistence.Id'));\n    // Check for id name as fallback\n    if (!idProperty) {\n      idProperty = rootProperties.find((propertyInfo) => propertyInfo.name === 'id');\n    }\n\n    return idProperty;\n  }\n\n  private static resolvePropertyModel(modelInstance: AbstractModel, path: string): AbstractModel | undefined {\n    const parts = path.split('.');\n    let currentModel: AbstractModel | undefined = modelInstance;\n    for (const part of parts) {\n      if (!currentModel || !(currentModel instanceof ObjectModel)) {\n        return undefined;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      currentModel = (currentModel as any)[part];\n    }\n    return currentModel;\n  }\n\n  getRootProperties(path?: string): PropertyInfo[] {\n    const model = path ? ModelInfo.resolvePropertyModel(this.modelInstance, path) : this.modelInstance;\n    if (!model) {\n      return [];\n    }\n    return getPropertyNames(model.constructor as any)\n      .map((name) => {\n        const effectivePath = path ? `${path}.${name}` : name;\n        return this.getProperty(effectivePath);\n      })\n      .filter(Boolean) as PropertyInfo[];\n  }\n\n  getProperty(path: string): PropertyInfo | undefined {\n    const propertyModel = ModelInfo.resolvePropertyModel(this.modelInstance, path);\n    if (!propertyModel?.[_meta]) {\n      return undefined;\n    }\n\n    const pathParts = path.split('.');\n    const name = pathParts[pathParts.length - 1];\n\n    const meta = propertyModel[_meta];\n    const humanReadableName = _generateHeader(name);\n    const type = determinePropertyType(propertyModel);\n\n    return {\n      name: path,\n      humanReadableName,\n      type,\n      meta,\n      model: propertyModel,\n    };\n  }\n\n  getProperties(paths: string[]): PropertyInfo[] {\n    return paths.map((path) => this.getProperty(path)).filter(Boolean) as PropertyInfo[];\n  }\n}\n\nexport function getDefaultProperties(modelInfo: ModelInfo): PropertyInfo[] {\n  // Start from root properties\n  const properties = modelInfo.getRootProperties();\n  return (\n    properties\n      // Auto-expand nested properties of one-to-one relations\n      .flatMap((prop) => {\n        if (hasAnnotation(prop.meta, 'jakarta.persistence.OneToOne')) {\n          return modelInfo.getRootProperties(prop.name);\n        }\n        return prop;\n      })\n      // Exclude properties that have an unknown type, or are annotated with id\n      // and version\n      .filter(\n        (prop) =>\n          !!prop.type &&\n          !(\n            hasAnnotation(prop.meta, 'jakarta.persistence.Id') ||\n            hasAnnotation(prop.meta, 'jakarta.persistence.Version')\n          ),\n      )\n  );\n}\n", "/* eslint-disable import/export */\nimport { AutoGrid as _AutoGrid } from './autogrid.js';\nimport { featureRegistration } from './util';\n\nexport * from './autogrid.js';\n\nexport const AutoGrid: typeof _AutoGrid = featureRegistration(_AutoGrid, 'AutoGrid');\n", "import { EndpointError } from '@vaadin/hilla-frontend';\nimport { type AbstractModel, type DetachedModelConstructor, ValidationError, type Value } from '@vaadin/hilla-lit-form';\nimport { useForm, type UseFormResult } from '@vaadin/hilla-react-form';\nimport { Button } from '@vaadin/react-components/Button.js';\nimport { ConfirmDialog } from '@vaadin/react-components/ConfirmDialog';\nimport { FormLayout } from '@vaadin/react-components/FormLayout';\nimport { VerticalLayout } from '@vaadin/react-components/VerticalLayout.js';\nimport {\n  type ComponentType,\n  type JSX,\n  type KeyboardEvent,\n  type ReactElement,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { AutoFormField, type AutoFormFieldProps, type FieldOptions } from './autoform-field.js';\nimport css from './autoform.obj.js';\nimport type { FormService } from './crud.js';\nimport { getDefaultProperties, ModelInfo, type PropertyInfo } from './model-info.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport const emptyItem = Symbol();\n\n/**\n * An event that is fired when an error occurs while submitting the form.\n */\nexport type SubmitErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully submitted.\n */\nexport type SubmitEvent<TItem> = {\n  /**\n   * The item that was submitted, as returned by the service.\n   */\n  item: TItem;\n};\n\n/**\n * An event that is fired when an error occurs while deleting an item.\n */\nexport type DeleteErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully deleted.\n */\nexport type DeleteEvent<TItem> = {\n  /**\n   * The item that was deleted, as returned by the service.\n   */\n  item: TItem;\n};\n\nexport type AutoFormLayoutRendererProps<M extends AbstractModel> = Readonly<{\n  form: UseFormResult<M>;\n  children: ReadonlyArray<ReactElement<AutoFormFieldProps>>;\n}>;\n\nexport type AutoFormProps<M extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for saving and deleting items. This must be a\n     * TypeScript service that has been generated by Hilla from a backend Java\n     * service that implements the `com.vaadin.hilla.crud.FormService` interface.\n     */\n    service: FormService<Value<M>>;\n    /**\n     * The entity model to use, which determines which fields to show in the\n     * form. This must be a Typescript model class that has been generated by\n     * Hilla from a backend Java class. The model must match with the type of\n     * the items handled by the service. For example, a `PersonModel` can be\n     * used with a service that handles `Person` instances.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `visibleFields` option to customize\n     * which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<M>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `FormService.delete` method. The delete button\n     * will not be shown if no item ID can be found.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * The item to edit in the form. The form fields are automatically populated\n     * with values from the item's properties. In order to create a new item,\n     * either pass `null`, or leave this prop as undefined.\n     *\n     * Use the `onSubmitSuccess` callback to get notified when the item has been\n     * saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    item?: Value<M> | typeof emptyItem | null;\n    /**\n     * Whether the form should be disabled. This disables all form fields and\n     * all buttons.\n     */\n    disabled?: boolean;\n    /**\n     * Allows to customize the layout of the form by providing a custom\n     * renderer. The renderer receives the form instance and the pre-rendered\n     * fields as props. The renderer can either reuse the pre-rendered fields in\n     * the custom layout, or render custom fields and connect them to the form\n     * manually.\n     *\n     * Check the component documentation for details and examples.\n     *\n     * Example using pre-rendered fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ children }) =>\n     *   <VerticalLayout>\n     *     {children}\n     *     <p>All data is collected anonymously.</p>\n     *   </VerticalLayout>\n     * } />\n     * ```\n     *\n     * Example rendering custom fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ form }) =>\n     *   <VerticalLayout>\n     *     <TextField {...form.field(form.model.name)} />\n     *     ...\n     *   </VerticalLayout>\n     * } />\n     * ```\n     */\n    layoutRenderer?: ComponentType<AutoFormLayoutRendererProps<M>>;\n    /**\n     * Defines the fields to show in the form, and in which order. This takes\n     * an array of property names. Properties that are not included in this\n     * array will not be shown in the form, and properties that are included,\n     * but don't exist in the model, will be ignored.\n     */\n    visibleFields?: string[];\n    /**\n     * Defines the fields to hide in the form, keeping the default order. This takes\n     * an array of property names. Properties that are not included in this\n     * array will not be hidden in the form, and properties that are included,\n     * but don't exist in the model, will be ignored.\n     */\n    hiddenFields?: string[];\n    /**\n     * Allows to customize the FormLayout used by default. This is especially useful\n     * to define the `responsiveSteps`. See the\n     * {@link https://hilla.dev/docs/react/components/form-layout | FormLayout documentation}\n     * for details.\n     */\n    formLayoutProps?: ComponentStyleProps & Pick<Parameters<typeof FormLayout>[0], 'responsiveSteps'>;\n    /**\n     * Allows to customize individual fields of the form. This takes an object\n     * where the keys are property names, and the values are options for the\n     * respective field for editing that property.\n     */\n    fieldOptions?: Record<string, FieldOptions>;\n    /**\n     * Whether to show the delete button in the form. This is disabled by\n     * default. If enabled, the delete button will only be shown when editing\n     * an existing item, which means that `item` is not null. The delete button\n     * will also only be shown if an item has a discernible ID. See the\n     * `itemIdProperty` prop for details how the item ID is detected.\n     *\n     * Use the `onDeleteSuccess` callback to get notified when the item has been\n     * deleted.\n     *\n     * NOTE: This only hides the button, it does not prevent from calling the\n     * delete method on the service. To completely disable deleting, you must\n     * override the `delete` method in the backend Java service to either throw\n     * an exception or annotate it with `@DenyAll` to prevent access.\n     */\n    deleteButtonVisible?: boolean;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * submitting the form.\n     *\n     * Note that this will not be called for validation errors, which are\n     * handled automatically.\n     */\n    onSubmitError?({ error }: SubmitErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * submitted and the item has been saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    onSubmitSuccess?({ item }: SubmitEvent<Value<M>>): void;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * deleting an item.\n     */\n    onDeleteError?({ error }: DeleteErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * deleted.\n     */\n    onDeleteSuccess?({ item }: DeleteEvent<Value<M>>): void;\n  }>;\n\n/**\n * Auto Form is a component that automatically generates a form for editing,\n * updating and deleting items from a backend service.\n *\n * Example usage:\n * ```tsx\n * import { AutoForm } from '@vaadin/hilla-react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoForm\n *   service={PersonService}\n *   model={PersonModel}\n *   onSubmitSuccess={({ item }) => {\n *     console.log('Submitted item:', item);\n *   }}\n * />\n * ```\n */\nexport function AutoForm<M extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  item = emptyItem,\n  onSubmitError,\n  onSubmitSuccess,\n  disabled,\n  layoutRenderer: LayoutRenderer,\n  visibleFields,\n  hiddenFields,\n  formLayoutProps,\n  fieldOptions,\n  style,\n  id,\n  className,\n  deleteButtonVisible,\n  onDeleteSuccess,\n  onDeleteError,\n}: AutoFormProps<M>): JSX.Element {\n  const form = useForm(model, {\n    onSubmit: async (formItem) => service.save(formItem),\n  });\n  const [formError, setFormError] = useState<JSX.Element | string>('');\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const modelInfo = useMemo(() => new ModelInfo(model, itemIdProperty), [model]);\n\n  const isEditMode = item !== undefined && item !== null && item !== emptyItem;\n  const showDeleteButton = deleteButtonVisible && isEditMode && modelInfo.idProperty;\n  const isSubmitDisabled = !!disabled || (isEditMode && !form.dirty);\n\n  useEffect(() => {\n    if (item !== emptyItem) {\n      form.read(item);\n    } else {\n      form.clear();\n    }\n  }, [item]);\n\n  function handleSubmitError(error: unknown) {\n    if (error instanceof ValidationError) {\n      const nonPropertyErrorMessages = error.errors\n        .filter((validationError) => !validationError.property)\n        .map((validationError) => validationError.validatorMessage ?? validationError.message);\n      if (nonPropertyErrorMessages.length > 0) {\n        setFormError(\n          <>\n            Validation errors:\n            <ul>\n              {nonPropertyErrorMessages.map((message, index) => (\n                <li key={index}>{message}</li>\n              ))}\n            </ul>\n          </>,\n        );\n      }\n    } else if (error instanceof EndpointError) {\n      if (onSubmitError) {\n        onSubmitError({ error, setMessage: setFormError });\n      } else {\n        setFormError(error.message);\n      }\n    } else {\n      throw error;\n    }\n  }\n\n  async function handleSubmit(): Promise<void> {\n    try {\n      setFormError('');\n      const newItem = await form.submit();\n      if (newItem === undefined) {\n        // If update returns an empty object, then no update was performed\n        throw new EndpointError('No update performed');\n      } else if (onSubmitSuccess) {\n        onSubmitSuccess({ item: newItem });\n      }\n      // Automatically clear the form after submitting a new item.\n      // Otherwise, there would be no way for the developer to clear it, as the\n      // there is no new value to set for the item prop to trigger the above\n      // effect in case the prop is already null, undefined or the empty item.\n      if (!item || item === emptyItem) {\n        form.clear();\n      }\n    } catch (error) {\n      handleSubmitError(error);\n    }\n  }\n\n  function deleteItem() {\n    setShowDeleteDialog(true);\n  }\n\n  async function confirmDelete() {\n    // At this point, item can not be null or emptyItem\n    const deletedItem = item as Value<M>;\n    try {\n      const idProperty = modelInfo.idProperty!;\n      // eslint-disable-next-line\n      const id = (item as any)[idProperty.name];\n      await service.delete(id);\n      if (onDeleteSuccess) {\n        onDeleteSuccess({ item: deletedItem });\n      }\n    } catch (error) {\n      if (error instanceof EndpointError) {\n        if (onDeleteError) {\n          onDeleteError({ error, setMessage: setFormError });\n        } else {\n          setFormError(error.message);\n        }\n      } else {\n        throw error;\n      }\n    } finally {\n      setShowDeleteDialog(false);\n    }\n  }\n\n  function cancelDelete() {\n    setShowDeleteDialog(false);\n  }\n\n  const handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.target instanceof HTMLTextAreaElement) {\n      return;\n    }\n    if (event.key === 'Enter' && !isSubmitDisabled) {\n      // eslint-disable-next-line no-void\n      void handleSubmit();\n    }\n  };\n\n  function createAutoFormField(propertyInfo: PropertyInfo): JSX.Element {\n    const fieldOptionsForProperty = fieldOptions?.[propertyInfo.name] ?? {};\n\n    return (\n      <AutoFormField\n        key={propertyInfo.name}\n        propertyInfo={propertyInfo}\n        form={form}\n        disabled={disabled}\n        options={fieldOptionsForProperty}\n      />\n    );\n  }\n\n  let visibleProperties = visibleFields ? modelInfo.getProperties(visibleFields) : getDefaultProperties(modelInfo);\n\n  // When using `hiddenFields`, remove fields to hide using their `name`\n  if (hiddenFields) {\n    visibleProperties = visibleProperties.filter(({ name }) => !hiddenFields.includes(name));\n  }\n\n  const fields = visibleProperties.map(createAutoFormField);\n\n  const layout = LayoutRenderer ? (\n    <LayoutRenderer form={form}>{fields}</LayoutRenderer>\n  ) : (\n    <FormLayout {...formLayoutProps}>{fields}</FormLayout>\n  );\n\n  return (\n    <div className={`auto-form ${className ?? ''}`} id={id} style={style} data-testid=\"auto-form\">\n      <VerticalLayout className=\"auto-form-fields\" onKeyDown={handleKeyDown}>\n        {layout}\n        {formError ? <div style={{ color: 'var(--lumo-error-color)' }}>{formError}</div> : <></>}\n      </VerticalLayout>\n      <div className=\"auto-form-toolbar\">\n        <Button\n          theme=\"primary\"\n          disabled={isSubmitDisabled}\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n        {form.dirty ? (\n          <Button theme=\"tertiary\" onClick={() => form.reset()}>\n            Discard\n          </Button>\n        ) : null}\n        {showDeleteButton && (\n          <Button className=\"auto-form-delete-button\" theme=\"tertiary error\" onClick={deleteItem}>\n            Delete...\n          </Button>\n        )}\n      </div>\n      {showDeleteDialog && (\n        <ConfirmDialog\n          opened\n          header=\"Delete item\"\n          confirmTheme=\"error\"\n          cancelButtonVisible\n          // eslint-disable-next-line\n          onConfirm={confirmDelete}\n          onCancel={cancelDelete}\n        >\n          Are you sure you want to delete the selected item?\n        </ConfirmDialog>\n      )}\n    </div>\n  );\n}\n", "export function __REGISTER__(feature, vaadinObj = (window.Vaadin ??= {})) {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `${__NAME__}/${feature}` : __NAME__,\n    version: __VERSION__,\n  });\n}\n", "/* eslint-disable @typescript-eslint/unbound-method */\nimport {\n  _fromString,\n  _validity,\n  type AbstractModel,\n  type BinderConfiguration,\n  type BinderNode,\n  BinderRoot,\n  CHANGED,\n  type DetachedModelConstructor,\n  type FieldStrategy,\n  getBinderNode,\n  getDefaultFieldStrategy,\n  hasFromString,\n  isFieldElement,\n  type Validator,\n  type Value,\n  type ValueError,\n  type ArrayModel,\n  type ArrayItemModel,\n} from '@vaadin/hilla-lit-form';\nimport { useEffect, useMemo, useReducer, useRef } from 'react';\nimport type { Writable } from 'type-fest';\n\n// @ts-expect-error: esbuild injection\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n__REGISTER__();\n\nlet isRendering = false;\n\nfunction useUpdate() {\n  const [_, count] = useReducer((x: number) => x + 1, 0);\n  return () => {\n    if (isRendering) {\n      return;\n    }\n    count();\n  };\n}\n\nexport type FieldDirectiveResult = Readonly<{\n  name: string;\n  onBlur(): void;\n  onChange(): void;\n  onInput(): void;\n  ref(element: HTMLElement | null): void;\n}>;\n\nexport type FieldDirective = (model: AbstractModel) => FieldDirectiveResult;\n\nexport type UseFormPartResult<M extends AbstractModel> = Readonly<{\n  defaultValue?: Value<M>;\n  dirty: boolean;\n  errors: readonly ValueError[];\n  invalid: boolean;\n  model: M;\n  name: string;\n  field: FieldDirective;\n  ownErrors: ReadonlyArray<ValueError<Value<M>>>;\n  required: boolean;\n  validators: ReadonlyArray<Validator<Value<M>>>;\n  value?: Value<M>;\n  visited: boolean;\n  addValidator(validator: Validator<Value<M>>): void;\n  setValidators(validators: ReadonlyArray<Validator<Value<M>>>): void;\n  setValue(value: Value<M> | undefined): void;\n  setVisited(visited: boolean): void;\n  validate(): Promise<readonly ValueError[]>;\n}>;\n\nexport type UseFormResult<M extends AbstractModel> = Omit<UseFormPartResult<M>, 'setValue' | 'value'> &\n  Readonly<{\n    value: Value<M>;\n    submitting: boolean;\n    setDefaultValue(value: Value<M>): void;\n    setValue(value: Value<M>): void;\n    submit(): Promise<Value<M> | undefined | void>;\n    reset(): void;\n    clear(): void;\n    read(value: Value<M> | null | undefined): void;\n    update(): void;\n  }>;\n\nexport type UseFormArrayPartResult<M extends ArrayModel> = Omit<UseFormPartResult<M>, 'field'> & {\n  items: ReadonlyArray<ArrayItemModel<M>>;\n};\n\ntype FieldState<T = unknown> = {\n  required: boolean;\n  invalid: boolean;\n  errorMessage: string;\n  strategy?: FieldStrategy<T>;\n  element?: HTMLElement;\n  changeBlurHandler(): void;\n  updateValue(): void;\n  markVisited(): void;\n  ref(element: HTMLElement | null): void;\n};\n\nfunction convertFieldValue<T extends AbstractModel>(model: T, fieldValue: unknown) {\n  return typeof fieldValue === 'string' && hasFromString(model) ? model[_fromString](fieldValue) : fieldValue;\n}\n\nfunction getFormPart<M extends AbstractModel>(node: BinderNode<M>): Omit<UseFormPartResult<M>, 'field'> {\n  return {\n    addValidator: node.addValidator.bind(node),\n    get defaultValue() {\n      return node.defaultValue;\n    },\n    dirty: node.dirty,\n    errors: node.errors,\n    invalid: node.invalid,\n    model: node.model,\n    name: node.name,\n    ownErrors: node.ownErrors,\n    required: node.required,\n    setValidators(validators) {\n      node.validators = validators;\n    },\n    setValue(value) {\n      node.value = value;\n    },\n    setVisited(visited: boolean) {\n      node.visited = visited;\n    },\n    validate: node.validate.bind(node),\n    validators: node.validators,\n    get value() {\n      return node.value;\n    },\n    visited: node.visited,\n  };\n}\n\nfunction useFields<M extends AbstractModel>(node: BinderNode<M>): FieldDirective {\n  const update = useUpdate();\n\n  return useMemo(() => {\n    const registry = new WeakMap<AbstractModel, FieldState>();\n\n    return ((model: AbstractModel) => {\n      isRendering = true;\n      const n = getBinderNode(model);\n\n      let fieldState = registry.get(model);\n\n      if (!fieldState) {\n        fieldState = {\n          element: undefined,\n          errorMessage: '',\n          invalid: false,\n          changeBlurHandler() {\n            fieldState!.updateValue();\n            fieldState!.markVisited();\n          },\n          markVisited() {\n            n.visited = true;\n          },\n          ref(element: HTMLElement | null) {\n            if (!element) {\n              fieldState!.element?.removeEventListener('change', fieldState!.changeBlurHandler);\n              fieldState!.element?.removeEventListener('input', fieldState!.updateValue);\n              fieldState!.element?.removeEventListener('blur', fieldState!.changeBlurHandler);\n              fieldState!.strategy?.removeEventListeners();\n              fieldState!.element = undefined;\n              fieldState!.strategy = undefined;\n              update();\n              return;\n            }\n\n            if (!isFieldElement(element)) {\n              throw new TypeError(`Element '${element.localName}' is not a form element`);\n            }\n\n            if (fieldState!.element !== element) {\n              fieldState!.element = element;\n              fieldState!.element.addEventListener('change', fieldState!.changeBlurHandler);\n              fieldState!.element.addEventListener('input', fieldState!.updateValue);\n              fieldState!.element.addEventListener('blur', fieldState!.changeBlurHandler);\n              fieldState!.strategy = getDefaultFieldStrategy(element, model);\n              update();\n            }\n          },\n          required: false,\n          strategy: undefined,\n          updateValue() {\n            if (fieldState!.strategy) {\n              // Remove invalid flag, so that .checkValidity() in Vaadin Components\n              // does not interfere with errors from Hilla.\n              fieldState!.strategy.invalid = false;\n              // When bad input is detected, skip reading new value in binder state\n              fieldState!.strategy.checkValidity();\n              n[_validity] = fieldState!.strategy.validity;\n              n.value = convertFieldValue(model, fieldState!.strategy.value);\n            }\n          },\n        };\n\n        registry.set(model, fieldState);\n      }\n\n      if (fieldState.strategy) {\n        const valueFromField = convertFieldValue(model, fieldState.strategy.value);\n        if (valueFromField !== n.value && !(Number.isNaN(n.value) && Number.isNaN(valueFromField))) {\n          fieldState.strategy.value = Number.isNaN(n.value) ? '' : n.value;\n        }\n\n        if (fieldState.required !== n.required) {\n          fieldState.required = n.required;\n          fieldState.strategy.required = n.required;\n        }\n\n        const firstError = n.ownErrors.at(0);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        const errorMessage = firstError?.message ?? '';\n        if (fieldState.errorMessage !== errorMessage) {\n          fieldState.errorMessage = errorMessage;\n          fieldState.strategy.errorMessage = errorMessage;\n        }\n\n        // Make sure invalid state is always in sync\n        fieldState.invalid = n.invalid;\n        fieldState.strategy.invalid = n.invalid;\n      }\n\n      isRendering = false;\n      return {\n        name: n.name,\n        ref: fieldState.ref,\n      };\n    }) as FieldDirective;\n  }, [node]);\n}\n\nexport function useForm<M extends AbstractModel>(\n  Model: DetachedModelConstructor<M>,\n  config?: BinderConfiguration<Value<M>>,\n): UseFormResult<M> {\n  const configRef = useRef<Writable<BinderConfiguration<Value<M>>>>({});\n  configRef.current.onSubmit = config?.onSubmit;\n  configRef.current.onChange = config?.onChange;\n  const update = useUpdate();\n  const binder = useMemo(() => new BinderRoot(Model, configRef.current), [Model]);\n  const field = useFields(binder);\n  const clear = binder.clear.bind(binder);\n\n  useEffect(() => {\n    binder.addEventListener(CHANGED.type, update);\n    clear(); // this allows to initialize the validation strategies (issue 2282)\n    return () => binder.removeEventListener(CHANGED.type, update);\n  }, [binder]);\n\n  return {\n    ...getFormPart(binder),\n    clear,\n    field,\n    read: binder.read.bind(binder),\n    reset: binder.reset.bind(binder),\n    setDefaultValue(defaultValue) {\n      binder.defaultValue = defaultValue;\n    },\n    setValue(value) {\n      binder.value = value;\n    },\n    submit: binder.submit.bind(binder),\n    value: binder.value,\n    submitting: binder.submitting,\n    update,\n  };\n}\n\nexport function useFormPart<M extends AbstractModel>(model: M): UseFormPartResult<M> {\n  isRendering = true;\n  const binderNode = getBinderNode(model);\n  const field = useFields(binderNode);\n  isRendering = false;\n\n  return {\n    ...getFormPart(binderNode),\n    field,\n  };\n}\n\n/**\n * Hook to access an array model part of a form. It provides the same API as `useFormPart`,\n * but adds an `items` property that allows to iterate over the items in form of an array of models.\n *\n * @param model - The array model to access\n * @returns The array model part of the form\n */\nexport function useFormArrayPart<M extends ArrayModel>(model: M): UseFormArrayPartResult<M> {\n  isRendering = true;\n  const binderNode = getBinderNode(model);\n  isRendering = false;\n  return {\n    ...getFormPart(binderNode),\n    items: Array.from(model, (item) => item.model as ArrayItemModel<M>),\n  };\n}\n", "import { _enum, type AbstractModel, type EnumModel, type Validator } from '@vaadin/hilla-lit-form';\nimport type { FieldDirectiveResult, UseFormResult } from '@vaadin/hilla-react-form';\nimport { useFormPart } from '@vaadin/hilla-react-form';\nimport { Checkbox } from '@vaadin/react-components/Checkbox.js';\nimport { DatePicker } from '@vaadin/react-components/DatePicker.js';\nimport { DateTimePicker } from '@vaadin/react-components/DateTimePicker.js';\nimport { IntegerField } from '@vaadin/react-components/IntegerField.js';\nimport { NumberField } from '@vaadin/react-components/NumberField.js';\nimport { Select } from '@vaadin/react-components/Select.js';\nimport { TextArea } from '@vaadin/react-components/TextArea.js';\nimport { TextField } from '@vaadin/react-components/TextField.js';\nimport { TimePicker } from '@vaadin/react-components/TimePicker.js';\nimport {\n  cloneElement,\n  type ComponentType,\n  createElement,\n  type CSSProperties,\n  type JSX,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { useDatePickerI18n, useDateTimePickerI18n } from './locale.js';\nimport type { PropertyInfo } from './model-info.js';\nimport { convertToTitleCase } from './util.js';\n\nexport type AutoFormFieldProps = Readonly<{\n  propertyInfo: PropertyInfo;\n  form: UseFormResult<any>;\n  options: FieldOptions;\n  disabled?: boolean;\n}>;\n\ntype CustomFormFieldProps = FieldDirectiveResult & Readonly<{ label?: string; disabled?: boolean }>;\n\nexport type FieldOptions = Readonly<{\n  /**\n   * The id to apply to the field.\n   */\n  id?: string;\n  /**\n   * The class names to add to the field.\n   */\n  className?: string;\n  /**\n   * The style to apply to the field.\n   */\n  style?: CSSProperties;\n  /**\n   * The label to show for the field. If not specified, a human-readable label\n   * is generated from the property name.\n   */\n  label?: string;\n  /**\n   * The placeholder to when the field is empty.\n   *\n   * Note that some field types, such as checkbox, do not support a placeholder.\n   */\n  placeholder?: string;\n  /**\n   * The helper text to display below the field.\n   *\n   * Note that some field types, such as checkbox, do not support a helper text.\n   */\n  helperText?: string;\n  /**\n   * The number of columns to span. This value is passed to the underlying\n   * FormLayout, unless a custom layout is used. In that case, the value is\n   * ignored.\n   */\n  colspan?: number;\n  /**\n   * Whether the field should be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Whether the field should be readonly.\n   */\n  readonly?: boolean;\n  /**\n   * The element to render for the field. This allows customizing field props\n   * that are not supported by the field options, or to render a different field\n   * component. Other field options are automatically applied to the element,\n   * and the element is automatically bound to the form. If not specified, a\n   * default field element is rendered based on the property type.\n   *\n   * The element must be a field component, such as TextField, TextArea,\n   * NumberField, etc., otherwise form binding will not work. For more\n   * sophisticated customizations, use the `renderer` option.\n   *\n   * If the field options also specify a renderer function, then the element is\n   * ignored.\n   *\n   * Example enabling the clear button for a text field:\n   * ```tsx\n   * {\n   *   element: <TextField clearButtonVisible />\n   * }\n   * ```\n   *\n   * Example rendering a text area instead of a text field:\n   * ```tsx\n   * {\n   *   element: <TextArea />\n   * }\n   * ```\n   */\n  element?: JSX.Element;\n  /**\n   * Allows to specify a custom renderer for the field, for example to render a\n   * custom type of field or apply an additional layout around the field. The\n   * renderer receives field props that must be applied to the custom field\n   * component in order to connect it to the form.\n   *\n   * In order to customize one of the default fields, or render a different type\n   * of field, consider using the `element` option instead.\n   *\n   * Example:\n   * ```tsx\n   * {\n   *   renderer: ({ field }) => (\n   *     <div>\n   *       <TextArea {...field} />\n   *       <p>Number of words: {calculateNumberOfWords()}</p>\n   *     </div>\n   *   )\n   * }\n   * ```\n   */\n  renderer?(props: { field: CustomFormFieldProps }): JSX.Element;\n  /**\n   * Validators to apply to the field. The validators are added to the form\n   * when the field is rendered.\n   * UseMemo is recommended for the validators, so that they are not recreated\n   * on every render.\n   */\n  validators?: Validator[];\n}>;\n\ntype CommonFieldProps = Pick<\n  FieldOptions,\n  'className' | 'colspan' | 'disabled' | 'helperText' | 'id' | 'label' | 'placeholder' | 'readonly' | 'style'\n>;\n\ntype FieldRendererProps = Readonly<{\n  model: AbstractModel;\n  field: FieldDirectiveResult;\n  element?: JSX.Element;\n  fieldProps: CommonFieldProps;\n}>;\n\nfunction getPropertyModel(form: UseFormResult<any>, propertyInfo: PropertyInfo) {\n  const pathParts = propertyInfo.name.split('.');\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return pathParts.reduce<any>((model, property) => (model ? model[property] : undefined), form.model);\n}\n\nfunction renderFieldElement(\n  defaultComponentType: ComponentType,\n  { element, field, fieldProps }: FieldRendererProps,\n  additionalProps: any = {},\n) {\n  const fieldElement = element ?? createElement(defaultComponentType);\n  return cloneElement(fieldElement, { ...fieldProps, ...additionalProps, ...fieldElement.props, ...field });\n}\n\nfunction AutoFormTextField(props: FieldRendererProps) {\n  return renderFieldElement(TextField, props);\n}\n\nfunction AutoFormIntegerField(props: FieldRendererProps) {\n  return renderFieldElement(IntegerField, props);\n}\n\nfunction AutoFormDecimalField(props: FieldRendererProps) {\n  return renderFieldElement(NumberField, props);\n}\n\nfunction AutoFormDateField(props: FieldRendererProps) {\n  const i18n = useDatePickerI18n();\n  return renderFieldElement(DatePicker, props, { i18n });\n}\n\nfunction AutoFormTimeField(props: FieldRendererProps) {\n  return renderFieldElement(TimePicker, props);\n}\n\nfunction AutoFormDateTimeField(props: FieldRendererProps) {\n  const i18n = useDateTimePickerI18n();\n  return renderFieldElement(DateTimePicker, props, { i18n });\n}\n\nfunction AutoFormEnumField(props: FieldRendererProps) {\n  const enumModel = props.model as EnumModel;\n  const items = Object.keys(enumModel[_enum]).map((value) => ({\n    label: convertToTitleCase(value),\n    value,\n  }));\n  return renderFieldElement(Select, props, { items });\n}\n\nfunction AutoFormBooleanField(props: FieldRendererProps) {\n  return renderFieldElement(Checkbox, props);\n}\n\nfunction AutoFormObjectField({ model, fieldProps }: FieldRendererProps) {\n  const part = useFormPart(model);\n  const jsonString = part.value ? JSON.stringify(part.value) : '';\n  return <TextArea {...fieldProps} value={jsonString} readonly />;\n}\n\nexport function AutoFormField(props: AutoFormFieldProps): JSX.Element | null {\n  const { form, propertyInfo, options } = props;\n  const label = options.label ?? propertyInfo.humanReadableName;\n  const model = getPropertyModel(form, propertyInfo);\n  const field = form.field(model);\n\n  const formPart = useFormPart(model);\n  const defaultValidators = useMemo(() => formPart.validators, []);\n  const { validators } = options;\n  useEffect(() => {\n    formPart.setValidators([...defaultValidators, ...(validators ?? [])]);\n  }, [validators]);\n\n  if (options.renderer) {\n    const customFieldProps = { ...field, disabled: props.disabled, label };\n    return options.renderer({ field: customFieldProps });\n  }\n\n  const fieldProps: CommonFieldProps = {\n    id: options.id,\n    className: options.className,\n    style: options.style,\n    label,\n    placeholder: options.placeholder,\n    helperText: options.helperText,\n    colspan: options.colspan,\n    disabled: options.disabled ?? props.disabled,\n    readonly: options.readonly,\n  };\n\n  const rendererProps: FieldRendererProps = { model, field, element: options.element, fieldProps };\n\n  switch (props.propertyInfo.type) {\n    case 'string':\n      return <AutoFormTextField {...rendererProps}></AutoFormTextField>;\n    case 'integer':\n      return <AutoFormIntegerField {...rendererProps}></AutoFormIntegerField>;\n    case 'decimal':\n      return <AutoFormDecimalField {...rendererProps}></AutoFormDecimalField>;\n    case 'date':\n      return <AutoFormDateField {...rendererProps}></AutoFormDateField>;\n    case 'time':\n      return <AutoFormTimeField {...rendererProps}></AutoFormTimeField>;\n    case 'datetime':\n      return <AutoFormDateTimeField {...rendererProps}></AutoFormDateTimeField>;\n    case 'enum':\n      return <AutoFormEnumField {...rendererProps}></AutoFormEnumField>;\n    case 'boolean':\n      return <AutoFormBooleanField {...rendererProps}></AutoFormBooleanField>;\n    case 'object':\n      return <AutoFormObjectField {...rendererProps}></AutoFormObjectField>;\n    default:\n      return null;\n  }\n}\n", "const css = new CSSStyleSheet();css.replaceSync(`.auto-form{display:flex;flex-direction:column;gap:var(--lumo-space-m)}.auto-form-toolbar{align-items:center;display:flex;flex-direction:row-reverse;gap:var(--lumo-space-xs) var(--lumo-space-s);justify-content:flex-start}.auto-form-delete-button{margin-right:auto}`);export { css as default };", "/* eslint-disable import/export */\nimport { AutoForm as _AutoForm } from './autoform.js';\nimport { featureRegistration } from './util';\n\nexport * from './autoform.js';\n\nexport const AutoForm: typeof _AutoForm = featureRegistration(_AutoForm, 'AutoForm');\n", "import type { AbstractModel, DetachedModelConstructor, Value } from '@vaadin/hilla-lit-form';\nimport { Button } from '@vaadin/react-components/Button.js';\nimport { SplitLayout } from '@vaadin/react-components/SplitLayout.js';\nimport { type JSX, useId, useRef, useState } from 'react';\nimport { AutoCrudDialog } from './autocrud-dialog.js';\nimport css from './autocrud.obj.js';\nimport { type AutoFormProps, emptyItem, AutoForm } from './autoform.js';\nimport { type AutoGridProps, AutoGrid, type AutoGridRef } from './autogrid.js';\nimport type { CrudService } from './crud.js';\nimport { useMediaQuery } from './media-query.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport type AutoCrudFormHeaderRenderer<TItem> = (\n  editedItem: TItem | null,\n  disabled: boolean,\n) => JSX.Element | null | undefined;\n\nexport type AutoCrudFormProps<TModel extends AbstractModel> = Omit<\n  Partial<AutoFormProps<TModel>>,\n  'disabled' | 'item' | 'model' | 'onDeleteSuccess' | 'onSubmitSuccess' | 'service'\n> &\n  Readonly<{\n    /**\n     * A custom renderer function to create the header for the form. The\n     * function receives the edited item as the first parameter, and a boolean\n     * indicating whether the form is disabled as the second parameter. The\n     * edited item is `null` when creating a new item.\n     *\n     * By default, the header shows \"New item\" when creating a new item, and\n     * \"Edit item\" when editing an existing item.\n     */\n    headerRenderer?: AutoCrudFormHeaderRenderer<Value<TModel>>;\n  }>;\n\nexport type AutoCrudGridProps<TItem> = Omit<\n  Partial<AutoGridProps<TItem>>,\n  'model' | 'onActiveItemChanged' | 'selectedItems' | 'service'\n>;\n\nexport type AutoCrudProps<TModel extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for fetching the data, as well saving and deleting\n     * items. This must be a TypeScript service that has been generated by Hilla\n     * from a backend Java service that implements the\n     * `com.vaadin.hilla.crud.CrudService` interface.\n     */\n    service: CrudService<Value<TModel>>;\n    /**\n     * The entity model to use for the CRUD. This determines which columns to\n     * show in the grid, and which fields to show in the form. This must be a\n     * Typescript model class that has been generated by Hilla from a backend\n     * Java class. The model must match with the type of the items returned by\n     * the service. For example, a `PersonModel` can be used with a service that\n     * returns `Person` instances.\n     *\n     * By default, the grid shows columns for all properties of the model which\n     * have a type that is supported. Use the `gridProps.visibleColumns` option\n     * to customize which columns to show and in which order.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `formProps.visibleFields`\n     * option to customize which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<TModel>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `CrudService.delete` method as well as keeping the\n     * selection state after reloading the grid.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * Props to pass to the form. See the `AutoForm` component for details.\n     */\n    formProps?: AutoCrudFormProps<TModel>;\n    /**\n     * Props to pass to the grid. See the `AutoGrid` component for details.\n     */\n    gridProps?: AutoCrudGridProps<Value<TModel>>;\n  }>;\n\nfunction defaultFormHeaderRenderer<TItem>(editedItem: TItem | null, disabled: boolean): JSX.Element | null | undefined {\n  const style = { color: disabled ? 'var(--lumo-disabled-text-color)' : 'var(--lumo-text-color)' };\n  return editedItem ? <h3 style={style}>Edit item</h3> : <h3 style={style}>New item</h3>;\n}\n\n/**\n * Auto CRUD is a component that provides CRUD (create, read, update, delete)\n * functionality based on a Java backend service. It automatically generates a\n * grid that shows data from the service, and a form for creating, updating and\n * deleting items.\n *\n * Example usage:\n * ```tsx\n * import { AutoCrud } from '@hilla/react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoCrud service={PersonService} model={PersonModel} />\n * ```\n */\nexport function AutoCrud<TModel extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  formProps,\n  gridProps,\n  style,\n  id,\n  className,\n}: AutoCrudProps<TModel>): JSX.Element {\n  const [item, setItem] = useState<Value<TModel> | typeof emptyItem | undefined>(undefined);\n  const fullScreen = useMediaQuery('(max-width: 600px), (max-height: 600px)');\n  const autoGridRef = useRef<AutoGridRef>(null);\n  const { headerRenderer: customFormHeaderRenderer, ...autoFormProps } = formProps ?? {};\n  const formHeaderRenderer: AutoCrudFormHeaderRenderer<Value<TModel>> =\n    customFormHeaderRenderer ?? defaultFormHeaderRenderer;\n\n  const autoCrudId = useId();\n\n  function refreshGrid() {\n    autoGridRef.current?.refresh();\n  }\n\n  function handleCancel() {\n    setItem(undefined);\n  }\n\n  const formHeader = item && item !== emptyItem ? formHeaderRenderer(item, !item) : formHeaderRenderer(null, !item);\n\n  const mainSection = (\n    <div className=\"auto-crud-main\">\n      <AutoGrid\n        {...gridProps}\n        service={service}\n        model={model as DetachedModelConstructor<AbstractModel<Value<TModel>>>}\n        itemIdProperty={itemIdProperty}\n        selectedItems={item && item !== emptyItem ? [item] : []}\n        onActiveItemChanged={(e) => {\n          const activeItem = e.detail.value;\n          setItem(activeItem ?? undefined);\n        }}\n        ref={autoGridRef}\n        aria-controls={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      ></AutoGrid>\n      <div className=\"auto-crud-toolbar\">\n        <Button theme=\"primary\" onClick={() => setItem(emptyItem)}>\n          + New\n        </Button>\n      </div>\n    </div>\n  );\n\n  const autoForm = (\n    <AutoForm\n      id={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      deleteButtonVisible={true}\n      {...autoFormProps}\n      disabled={!item}\n      service={service}\n      model={model}\n      itemIdProperty={itemIdProperty}\n      item={item}\n      onSubmitSuccess={({ item: submittedItem }) => {\n        if (fullScreen) {\n          setItem(undefined);\n        } else {\n          setItem(submittedItem);\n        }\n        refreshGrid();\n      }}\n      onDeleteSuccess={() => {\n        setItem(undefined);\n        refreshGrid();\n      }}\n    />\n  );\n\n  return (\n    <div className={`auto-crud ${className ?? ''}`} id={id} style={style}>\n      {fullScreen ? (\n        <>\n          {mainSection}\n          <AutoCrudDialog opened={!!item} header={formHeader} onClose={handleCancel}>\n            {autoForm}\n          </AutoCrudDialog>\n        </>\n      ) : (\n        <SplitLayout theme=\"small\">\n          {mainSection}\n          <div className=\"auto-crud-form\">\n            <div className=\"auto-crud-form-header\">{formHeader}</div>\n            {autoForm}\n          </div>\n        </SplitLayout>\n      )}\n    </div>\n  );\n}\n", "import { Button } from '@vaadin/react-components/Button';\nimport { Dialog } from '@vaadin/react-components/Dialog';\nimport { Icon } from '@vaadin/react-components/Icon';\nimport type { JSX } from 'react';\n\n// eslint-disable-next-line\nimport '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';\n\ninterface AutoCrudDialogProps {\n  header: JSX.Element | null | undefined;\n  children: React.ReactElement;\n  opened: boolean;\n  // eslint-disable-next-line @typescript-eslint/method-signature-style\n  onClose: () => void;\n}\n\nexport function AutoCrudDialog(props: AutoCrudDialogProps): JSX.Element {\n  const { header, children, opened, onClose } = props;\n  return (\n    <Dialog\n      overlayClass=\"auto-crud-dialog\"\n      opened={opened}\n      headerRenderer={() => (\n        <div className=\"auto-crud-dialog-header\">\n          {header}\n          <Button theme=\"tertiary\" onClick={onClose} aria-label=\"Close\">\n            <Icon icon=\"lumo:cross\" style={{ height: 'var(--lumo-icon-size-l)', width: 'var(--lumo-icon-size-l)' }} />\n          </Button>\n        </div>\n      )}\n    >\n      {children}\n    </Dialog>\n  );\n}\n", "const css = new CSSStyleSheet();css.replaceSync(`.auto-crud{border:1px solid var(--lumo-contrast-20pct);display:flex;overflow:hidden}.auto-crud vaadin-split-layout{flex:1 1 100%}.auto-crud vaadin-split-layout::part(splitter){border-left:1px solid var(--lumo-contrast-20pct);border-top:1px solid var(--lumo-contrast-20pct)}.auto-crud-main{display:flex;flex:1 1 100%;flex-direction:column;min-width:200px}.auto-crud-main vaadin-grid{border:none}.auto-crud-toolbar{align-items:baseline;background-color:var(--lumo-contrast-5pct);border-top:1px solid var(--lumo-contrast-10pct);display:flex;flex-shrink:0;justify-content:flex-end;padding:var(--lumo-space-s) var(--lumo-space-m)}.auto-crud-form{align-items:stretch;display:flex;flex-direction:column;min-width:300px;width:40%}.auto-crud .auto-crud-form:before{box-shadow:var(--lumo-box-shadow-s);content:\"\";height:100%;pointer-events:none;position:absolute;width:100%;z-index:1}.auto-crud-form-header{padding:var(--lumo-space-m) var(--lumo-space-m) var(--lumo-space-s) var(--lumo-space-m)}.auto-crud .auto-form,.auto-crud-dialog .auto-form{align-items:stretch;display:flex;flex:1 1 0;flex-direction:column}.auto-crud .auto-form-fields,.auto-crud-dialog .auto-form-fields{flex:1 1 0;min-height:0;overflow-y:auto;padding:0 var(--lumo-space-m)}.auto-crud .auto-form-toolbar,.auto-crud-dialog .auto-form-toolbar{background-color:var(--lumo-contrast-5pct);border-top:1px solid var(--lumo-contrast-10pct);flex:0 0 auto;padding:var(--lumo-space-s) var(--lumo-space-m)}.auto-crud-dialog{bottom:0;left:0;right:0;top:0}.auto-crud-dialog::part(overlay){border-radius:0;height:100%;width:100%}.auto-crud-dialog::part(content){padding:0}.auto-crud-dialog .auto-crud-dialog-header{align-items:center;display:flex;justify-content:space-between;width:100%}.auto-crud-dialog .auto-form{height:100%;width:100%}`);export { css as default };", "import { useEffect, useState } from 'react';\n\nexport function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(() => window.matchMedia(query).matches);\n\n  useEffect(() => {\n    const listener = (e: MediaQueryListEvent) => setMatches(e.matches);\n    const mediaQuery = window.matchMedia(query);\n    setMatches(mediaQuery.matches);\n    mediaQuery.addEventListener('change', listener);\n    return () => mediaQuery.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n}\n", "/* eslint-disable import/export */\nimport { AutoCrud as _AutoCrud } from './autocrud.js';\nimport { featureRegistration } from './util';\n\nexport * from './autocrud.js';\n\nexport const AutoCrud: typeof _AutoCrud = featureRegistration(_AutoCrud, 'AutoCrud');\n", "export function __REGISTER__(feature, vaadinObj = (window.Vaadin ??= {})) {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `${__NAME__}/${feature}` : __NAME__,\n    version: __VERSION__,\n  });\n}\n", "export * from './autogrid-feature.js';\nexport type * from './crud.js';\nexport * from './autoform-feature.js';\nexport * from './autocrud-feature.js';\nexport { useDataProvider } from './data-provider.js';\n\n// @ts-expect-error: esbuild injection\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n__REGISTER__();\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "import_react", "import_jsx_runtime", "import_react", "import_react", "e", "import_react", "css", "import_jsx_runtime", "import_react", "Matcher", "p", "e", "m", "k", "import_react", "Direction", "import_jsx_runtime", "import_react", "e", "p", "_a", "f", "AutoGrid", "import_jsx_runtime", "import_react", "__REGISTER__", "n", "import_react", "import_jsx_runtime", "import_react", "p", "r", "k", "css", "css", "id", "p", "m", "AutoForm", "import_jsx_runtime", "import_react", "import_jsx_runtime", "m", "css", "import_react", "e", "css", "e", "m", "n", "AutoCrud", "__REGISTER__"]
}
